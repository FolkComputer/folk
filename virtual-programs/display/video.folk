On process "display" {
    # Load the video utilities module
    # Try multiple possible paths to find the video-utils.tcl file
    set modulePath ""
    set possiblePaths {
        "./lib/video-utils.tcl"
        "../lib/video-utils.tcl"
        "../../lib/video-utils.tcl"
        "/home/folk/folk/lib/video-utils.tcl"
    }
    
    foreach path $possiblePaths {
        if {[file exists $path]} {
            set modulePath $path
            break
        }
    }
    
    if {$modulePath eq ""} {
        puts stderr "Cannot find video-utils.tcl in any expected location"
    } else {
        puts stderr "Loading video module from: $modulePath"
        source $modulePath
    }
    
    # Register for events
    Wish $::thisProcess receives statements like [list /someone/ wishes /thing/ displays video /videoSrc/]
    Wish $::thisProcess receives statements like [list /someone/ claims /thing/ has region /r/]
    Wish $::thisProcess shares statements like [list /someone/ wishes to draw an image with center /c/ image /im/ radians /radians/]
    Wish $::thisProcess shares statements like [list /someone/ wishes /thing/ is titled /title/]
    Wish $::thisProcess receives statements like [list /someone/ claims the clock time is /t/]

    # Handle video source
    When /someone/ wishes /thing/ displays video /videoSrc/ {
        puts stderr "Will play video: $videoSrc"
        VideoState::registerSource $thing $videoSrc
        Claim $thing has videoSource $videoSrc
        Claim $thing has videoStartTime 0
        video::analyzeVideo $videoSrc
    }

    # Video playback with optimized throttling
    When /someone/ wishes /thing/ displays video /videoSrc/ & /thing/ has region /r/ & the clock time is /t/ {
        # State variables
        variable lastFrame
        variable lastFrameNum
        variable lastFrameTime
        variable frameSkipCount
        
        # Get video metadata
        set metadata [VideoState::getMetadata $videoSrc]
        set fps [dict get $metadata fps]
        set totalFrames [dict get $metadata totalFrames]
        set duration [dict get $metadata duration]
        
        # Initialize if needed
        set startTime [VideoState::getStartTime $thing]
        if {$startTime == 0} {
            VideoState::setStartTime $thing $t
            Claim $thing has videoStartTime $t
            set startTime $t
            set lastFrameTime($thing) $t
            set frameSkipCount($thing) 0
        }
        
        # Get frame number with proper looping
        set frameNum [VideoState::getFrameNumber $thing $t]
        
        # Smart throttling (different for short vs long videos)
        set processFrame 1
        if {[info exists lastFrameTime($thing)]} {
            set timeSince [expr {$t - $lastFrameTime($thing)}]
            
            # For very short videos (<3s), use higher frame rate
            if {$duration < 3.0} {
                # Process at max 20fps
                if {$timeSince < 0.05} {
                    set processFrame 0
                    
                    # But count skipped frames
                    if {![info exists frameSkipCount($thing)]} {
                        set frameSkipCount($thing) 0
                    }
                    incr frameSkipCount($thing)
                    
                    # Force occasional processing to avoid getting stuck
                    if {$frameSkipCount($thing) > 5} {
                        set processFrame 1
                        set frameSkipCount($thing) 0
                    }
                } else {
                    set lastFrameTime($thing) $t
                    set frameSkipCount($thing) 0
                }
            } else {
                # For longer videos, more aggressive throttling
                if {$timeSince < 0.1} {
                    set processFrame 0
                } else {
                    set lastFrameTime($thing) $t
                }
            }
        } else {
            set lastFrameTime($thing) $t
            set frameSkipCount($thing) 0
        }
        
        # Skip redundant frame processing
        if {!$processFrame || ([info exists lastFrameNum($thing)] && $lastFrameNum($thing) == $frameNum)} {
            # Redraw last frame if we have it
            if {[info exists lastFrame($thing)]} {
                set center [region centroid $r]
                set angle [region angle $r]
                Wish to draw an image with center $center image $lastFrame($thing) radians $angle
            }
            return
        }
        
        # Update tracking
        set lastFrameNum($thing) $frameNum
        
        # Get and display frame
        if {[catch {
            set frame [video::getVideoFrame $videoSrc $frameNum]
            set lastFrame($thing) $frame
            
            # Display the frame
            set center [region centroid $r]
            set angle [region angle $r]
            Wish to draw an image with center $center image $frame radians $angle
            
            # Update title with simplified info
            set elapsed [expr {$t - $startTime}]
            set loopCount [expr {int($elapsed / $duration)}]
            Wish $thing is titled "Video: [file tail $videoSrc] ($frameNum/$totalFrames)"
        } err]} {
            # Error handling
            VideoState::log 0 "Playback error: $err"
            
            # Use cached frame if available
            if {[info exists lastFrame($thing)]} {
                set center [region centroid $r]
                set angle [region angle $r]
                Wish to draw an image with center $center image $lastFrame($thing) radians $angle
            }
            
            # Reset if errors persist
            if {[incr errorCount($thing) 0] > 3} {
                VideoState::log 0 "Resetting video due to errors"
                VideoState::setStartTime $thing 0
                video::freeCache $::interp
                set errorCount($thing) 0
            }
        }
    }
}

# Usage example:
# Wish $this displays video "/path/to/video.mp4"