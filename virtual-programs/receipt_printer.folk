namespace eval EscPos {
    proc printProgram {id code address} {
        set folkFile [open "$::env(HOME)/folk-printed-programs/$id.folk" w]
        puts $folkFile $code
        close $folkFile

        set printerSocket [socket $address 9100]

        fconfigure $printerSocket -translation binary -buffering none
        puts -nonewline $printerSocket "[init][tag $id][feed 1]$id ([clock format [clock seconds] -timezone :America/Denver -format "%a, %d %b %Y, %r"])[feed 2]$code[feed 3][cut]"
        close $printerSocket
    }

    proc cut {} {
        return "\x1dV\x0"
    }

    proc feed n {
        return [format "\x1b\x64%c" $n]
    }

    proc init {} {
        return "\x1b\x40"
    }

    proc raw number {
        return [format "%c" $number]
    }

    proc scaledAprilTag {id scale} {
        set tagImage [::tagImageForId $id]
        set tagBits [list]
        for {set y 0} {$y < 10} {incr y} {
            for {set i 0 } {$i < $scale} {incr i} {
                for {set x 0} {$x < 10} {incr x} {
                    set j [expr {$y * [image_t bytesPerRow $tagImage] + $x}]
                    set bit [!= [image_t data $tagImage $j] 255]
                    lappend tagBits {*}[lrepeat $scale $bit]
                }
            }
        }
        return $tagBits
    }

    proc tag {id {scale 20}} {
        set tagImage [::tagImageForId $id]
        set tagBits [scaledAprilTag $id $scale]

        set width [expr {10 * $scale}]
        set xL [expr {$width / 8}]   ;# width in bytes (low byte)
        set yL [expr {$width % 256}] ;# height in lines (low byte)
        set yH [expr {$width / 256}] ;# height in lines (high byte)

        return "\x1dv0\x03[raw $xL]\x00[raw $yL][raw $yH][binary format B* [join $tagBits ""]]"
    }
}
