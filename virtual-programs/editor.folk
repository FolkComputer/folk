Wish $this has filename "editor.folk"

Wish $this has top dock

proc subtractBy50 {coords} {
  list [lindex $coords 0] [expr {[lindex $coords 1] - 50}]
}

When /thing/ wishes /page/ has /position/ dock & /page/ has region /r/ & /p2/ has region /r2/ {
     if {$page eq $p2} { return }
     lassign [lindex $r 0] a b c d
     lassign $a x y
     Display::stroke [list $a $b [subtractBy50 $b] [subtractBy50 $a] $a] 8 green
     set bMinX [expr {$x}]
     set bMinY [expr {$y - 50}]
     set bMaxX [lindex $b 0]
     set bMaxY [lindex $b 1]
     lassign [regionToBbox $r2] b2MinX b2MinY b2MaxX b2MaxY
     
     set hasIntersections [rectanglesOverlap [list $bMinX $bMinY] \
                 [list $bMaxX $bMaxY]\
                 [list $b2MinX $b2MinY]\
                 [list $b2MaxX $b2MaxY]\
     false ]
     if {$hasIntersections} {
       Claim $p2 has docked program $p2
     }
}

When /page/ has docked program /d/ & /d/ has program code /c/ {
  Wish $page is outlined white
  Wish $this is labelled $c
}

Commit cursor { Claim $this has a cursor [list 0 0]}
Commit lastKey { Claim $this has a program [list] }

proc isCommandWithChar { currentKey lastKey matchChar } {
  set isS [expr {$currentKey == $matchChar}]
  set isMeta [string match "Meta*" $lastKey]
  expr {$isS && $isMeta}
}

proc isControlWithChar {currentKey lastKey matchChar} {
  set isS [expr {$currentKey == $matchChar}]
  set isMeta [string match "leftctrl" $lastKey]
  expr {$isS && $isMeta}
}

Every time the keyboard character log is /k/ & $this has a program /p/ {
  Wish $this is labelled "p: $p"
  Commit lastKey {
    Claim $this has a last key [lindex $p end]
    Claim $this has a program [list {*}$p [lindex $k end]]
    set currentKey [lindex $p end]
    set lastKey [lindex $p end-1]
    set CMDRPressed [isCommandWithChar $currentKey $lastKey "r"]
    set CMDSPressed [isCommandWithChar $currentKey $lastKey "s"]
    set CTRLSPressed [isControlWithChar $currentKey $lastKey "s"]
    set CTRLRPressed [isControlWithChar $currentKey $lastKey "r"]

    # Wish $this is labelled "CMD + S: $CMDSPressed"
    # Wish $this is labelled "CMD + R: $CMDRPressed"
    # Wish $this is labelled "CTRL + S: $CTRLSPressed"
    # Wish $this is labelled "CTRL + R: $CTRLRPressed"
    Wish $this is labelled "$currentKey | $lastKey"
  }
}

Wish $this has neighbors
proc x {v} { lindex $v 0 }
proc y {v} { lindex $v 1 }

When $this has neighbor /n/ & $this has region /r/ {
  set above [list]
  When $n has region /nr/ {
    lassign $nr v e
    lassign $v a b c d
    set myVertices [lindex $r 0]
    lassign $myVertices mA mB mC mD
    set isAbove [expr {[y $a] < [y $mA]}]
    set notVirtual [expr {![string match "virtual-programs*" $n] & ![string match "web-program*" $n]}]
    if {$isAbove && $notVirtual} {
      Wish $this is labelled "$n: [expr {[y $mA] - [y $a]}]"
    }
  }
}

Wish $this is outlined blue