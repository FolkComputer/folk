Wish $this has filename "editor.folk"

Commit cursor { Claim $this has a cursor [list 0 0]}
Commit lastKey { Claim $this has a program [list] }

proc isCommandWithChar { currentKey lastKey matchChar } {
  set isS [expr {$currentKey == $matchChar}]
  set isMeta [string match "Meta*" $lastKey]
  expr {$isS && $isMeta}
}

proc isControlWithChar {currentKey lastKey matchChar} {
  set isS [expr {$currentKey == $matchChar}]
  set isMeta [string match "leftctrl" $lastKey]
  expr {$isS && $isMeta}
}

Every time the keyboard character log is /k/ & $this has a program /p/ {
  Wish $this is labelled "p: $p"
  Commit lastKey {
    Claim $this has a last key [lindex $p end]
    Claim $this has a program [list {*}$p [lindex $k end]]
    set currentKey [lindex $p end]
    set lastKey [lindex $p end-1]
    set CMDRPressed [isCommandWithChar $currentKey $lastKey "r"]
    set CMDSPressed [isCommandWithChar $currentKey $lastKey "s"]
    set CTRLSPressed [isControlWithChar $currentKey $lastKey "s"]
    set CTRLRPressed [isControlWithChar $currentKey $lastKey "r"]

    Wish $this is labelled "CMD + S: $CMDSPressed"
    Wish $this is labelled "CMD + R: $CMDRPressed"
    Wish $this is labelled "CTRL + S: $CTRLSPressed"
    Wish $this is labelled "CTRL + R: $CTRLRPressed"
    Wish $this is labelled "$currentKey | $lastKey"
  }
}

When /someone/ has a program /p/ & /someone/ has a last key /lk/ {
  set currentKey [lindex $p end]
  Wish $this is labelled "CMD + S: [isCommandWithChar $currentKey $lk "s"]"
  Wish $this is labelled "CMD + R: [isCommandWithChar $currentKey $lk "r"]"
}



Wish $this has neighbors

proc x {v} { lindex $v 0 }
proc y {v} { lindex $v 1 }

When $this has neighbor /n/ & $this has region /r/ {
  set above [list]
  When $n has region /nr/ {
    lassign $nr v e
    lassign $v a b c d
    set myVertices [lindex $r 0]
    lassign $myVertices mA mB mC mD
    set isAbove [expr {[y $a] < [y $mA]}]
    if {$isAbove} {
      Wish $this is labelled [expr {[y $mA] - [y $a]}]
    }
  }
}

Wish $this is outlined blue