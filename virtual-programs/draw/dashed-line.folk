Wish the GPU compiles pipeline "dashed-line" {
    {vec2 from vec2 to float thickness vec4 color
     float dashlength float dashoffset} {
        vec2 vertices[4] = vec2[4](
             min(from, to) - thickness,
             vec2(max(from.x, to.x) + thickness, min(from.y, to.y) - thickness),
             vec2(min(from.x, to.x) - thickness, max(from.y, to.y) + thickness),
             max(from, to) + thickness
        );
        return vec4(vertices[gl_VertexIndex], 0.0, 1.0);
    } {
        vec2 p = gl_FragCoord.xy;

        float l = length(to - from);

        // How far are we along the line? (in pixels)
        float t = dot(p - from, to - from) / l + dashoffset;

        vec2 d = (to - from) / l;
        vec2 q = (p - (from + to)*0.5);
        q = mat2(d.x, -d.y, d.y, d.x) * q;
        q = abs(q) - vec2(l, thickness)*0.5;
        float dist = length(max(q, 0.0)) + min(max(q.x, q.y), 0.0);

        return (dist < 0.0 && floor(mod(t / dashlength, 2)) == 0) ? color : vec4(0, 0, 0, 0);
    }
}

When the color map is /colorMap/ &\
     /someone/ wishes to draw a dashed line with /...options/ {
    set points [dict get $options points]
    set width [dict get $options width]
    set color [dict get $options color]
    set color [dict getdef $colorMap $color $color]
    set dashlength [dict getdef $options dashlength 4]
    set dashoffset [dict getdef $options dashoffset 0]

    set layer [dict getdef $options layer 0]

    set instances [list]
    for {set i 0} {$i < [expr {[llength $points] - 1}]} {incr i} {
        set from [lindex $points $i]
        set to [lindex $points [expr $i+1]]
        lappend instances [list $from $to $width $color $dashlength $dashoffset]
    }
    Wish the GPU draws pipeline "dashed-line" with instances $instances layer $layer
}
