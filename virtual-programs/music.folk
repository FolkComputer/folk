if {$::isLaptop} { return }
if {[catch {exec which sclang}]} { return }

namespace eval ::Music { variable musicDir $::env(HOME)/music }
exec mkdir -p $::Music::musicDir
set bootTidal [open $::Music::musicDir/BootTidal.hs w]
# https://raw.githubusercontent.com/tidalcycles/Tidal/main/BootTidal.hs
puts $bootTidal {
:set -XOverloadedStrings
:set prompt ""

import Sound.Tidal.Context

import System.IO (hSetEncoding, stdout, utf8)
hSetEncoding stdout utf8

tidal <- startTidal (superdirtTarget {oLatency = 0.05, oAddress = "127.0.0.1", oPort = 57120}) (defaultConfig {cVerbose = True, cFrameTimespan = 1/20})

:{
let only = (hush >>)
    p = streamReplace tidal
    hush = streamHush tidal
    panic = do hush
               once $ sound "superpanic"
    list = streamList tidal
    mute = streamMute tidal
    unmute = streamUnmute tidal
    unmuteAll = streamUnmuteAll tidal
    unsoloAll = streamUnsoloAll tidal
    solo = streamSolo tidal
    unsolo = streamUnsolo tidal
    once = streamOnce tidal
    first = streamFirst tidal
    asap = once
    nudgeAll = streamNudgeAll tidal
    all = streamAll tidal
    resetCycles = streamResetCycles tidal
    setCycle = streamSetCycle tidal
    setcps = asap . cps
    getcps = streamGetcps tidal
    getnow = streamGetnow tidal
    xfade i = transition tidal True (Sound.Tidal.Transition.xfadeIn 4) i
    xfadeIn i t = transition tidal True (Sound.Tidal.Transition.xfadeIn t) i
    histpan i t = transition tidal True (Sound.Tidal.Transition.histpan t) i
    wait i t = transition tidal True (Sound.Tidal.Transition.wait t) i
    waitT i f t = transition tidal True (Sound.Tidal.Transition.waitT f t) i
    jump i = transition tidal True (Sound.Tidal.Transition.jump) i
    jumpIn i t = transition tidal True (Sound.Tidal.Transition.jumpIn t) i
    jumpIn' i t = transition tidal True (Sound.Tidal.Transition.jumpIn' t) i
    jumpMod i t = transition tidal True (Sound.Tidal.Transition.jumpMod t) i
    jumpMod' i t p = transition tidal True (Sound.Tidal.Transition.jumpMod' t p) i
    mortal i lifespan release = transition tidal True (Sound.Tidal.Transition.mortal lifespan release) i
    interpolate i = transition tidal True (Sound.Tidal.Transition.interpolate) i
    interpolateIn i t = transition tidal True (Sound.Tidal.Transition.interpolateIn t) i
    clutch i = transition tidal True (Sound.Tidal.Transition.clutch) i
    clutchIn i t = transition tidal True (Sound.Tidal.Transition.clutchIn t) i
    anticipate i = transition tidal True (Sound.Tidal.Transition.anticipate) i
    anticipateIn i t = transition tidal True (Sound.Tidal.Transition.anticipateIn t) i
    forId i t = transition tidal False (Sound.Tidal.Transition.mortalOverlay t) i
    d1 = p 1 . (|< orbit 0)
    d2 = p 2 . (|< orbit 1)
    d3 = p 3 . (|< orbit 2)
    d4 = p 4 . (|< orbit 3)
    d5 = p 5 . (|< orbit 4)
    d6 = p 6 . (|< orbit 5)
    d7 = p 7 . (|< orbit 6)
    d8 = p 8 . (|< orbit 7)
    d9 = p 9 . (|< orbit 8)
    d10 = p 10 . (|< orbit 9)
    d11 = p 11 . (|< orbit 10)
    d12 = p 12 . (|< orbit 11)
    d13 = p 13
    d14 = p 14
    d15 = p 15
    d16 = p 16
:}

:{
let getState = streamGet tidal
    setI = streamSetI tidal
    setF = streamSetF tidal
    setS = streamSetS tidal
    setR = streamSetR tidal
    setB = streamSetB tidal
:}

:set prompt "tidal> "
:set prompt-cont ""

default (Pattern String, Integer, Double)
}
close $bootTidal

set ::env(DBUS_SESSION_BUS_ADDRESS) "unix:path=/run/user/1000/bus"

proc ::Music::exec {args} {
  variable musicDir
  if {[lindex $args end] eq "&"} {
    ::exec {*}[lreplace $args end end] >>$musicDir/music.log 2>>$musicDir/music.log &
  } else {
    ::exec {*}$args >>$musicDir/music.log 2>>$musicDir/music.log
  }
}
proc ::Music::finishSetup {} {
  variable musicDir

  if {$::thisNode ne "folk-beads"} {
    exec jack_control start
    exec jack_control ds alsa
    if {$::thisNode eq "folk-recurse"} {
        exec jack_control dps device hw:PCH,0
        exec jack_control dps period 256
    } else {
        exec jack_control dps device hw:HDMI,10
        exec jack_control dps period 64
    }
    exec jack_control dps rate 48000
    exec jack_control dps nperiods 2
  }

  catch {exec pkill ghci}
  catch {exec pkill sclang}
  after 500 {
    set scFifo $::Music::musicDir/sc-input
    exec rm -f $scFifo
    exec mkfifo $scFifo
    ::Music::exec -ignorestderr sh -c "QT_QPA_PLATFORM=offscreen sclang -i folk < $scFifo" &
    set scFifoId [open $scFifo w]
    namespace eval ::Music { variable scFifo $scFifoId }
    ::Music::scExec {
        d = \SuperDirt.asClass;
        if(d.isNil, { s.boot }, { d.start });
        d = Dictionary();
        ~synthNames = Dictionary();
        ~bufs = Dictionary();
        ~folkOSC = NetAddr.new("127.0.0.1", 7771);
        o = OSCFunc({ arg msg, time;
            var name;
            name = ~synthNames[msg[1]];
            if(name.notNil, {
                ~folkOSC.sendMsg("/sounds/" ++ name ++ "/" ++ msg[2], msg[3]);
            });
        }, '/tr', s.addr);
    }
    Assert Supercollider is ready

    set tidalFifo $::Music::musicDir/tidal-input
    exec rm -f $tidalFifo
    exec mkfifo $tidalFifo
    ::Music::exec -ignorestderr sh -c "ghci < $tidalFifo" &
    set fifoId [open $tidalFifo w]
    exec cat $::Music::musicDir/BootTidal.hs > $tidalFifo
  }
}

proc ::Music::waitForDbus {} {
    puts "Waiting for D-Bus."
    if {[file exists /run/user/1000/bus]} {
        puts "Found D-Bus."
        ::Music::finishSetup
    } else {
        after 100 ::Music::waitForDbus
    }
}

::Music::waitForDbus

proc ::Music::scExec {cmd} {
    puts $::Music::scFifo "$cmd\x1b"
    flush $::Music::scFifo
}

When Supercollider is ready & /someone/ wishes Supercollider runs /source/ {
    ::Music::scExec $source
}

set ::nextscsynthid 0

When Supercollider is ready & \
     /someone/ wishes Supercollider plays sound /name/ /source/ with initialization /init/ {
    set synthid [incr ::nextscsynthid]
    set params [Statements::findMatches [list /someone/ wishes Supercollider sound $name attr /attr/ is /value/]]
    set paramStr ""
    foreach param $params {
        dict with param { append paramStr "\\$attr, $value," }
    }
    ::Music::scExec [subst -nocommands -nobackslashes {
        ($init);
        x = {$source}.play(args: [$paramStr]);
        d["$synthid"] = x;
        ~synthNames[x.asNodeID] = "$name";
    }]
    Claim Supercollider sound $name has synth ID $synthid
    On unmatch {
        ::Music::scExec [subst -nocommands -nobackslashes {
            x = d["$synthid"];
            ~synthNames[x.asNodeID] = nil;
            x.free;
            d["$synthid"] = nil;
        }]
    }
}

When /someone/ wishes Supercollider plays sound /name/ /source/ {
    Wish Supercollider plays sound $name $source with initialization { }
}

When Supercollider is ready & \
     /someone/ wishes Supercollider sound /name/ attr /attr/ is /value/ & \
     Supercollider sound /name/ has synth ID /synthid/ {
    ::Music::scExec "d\[\"$synthid\"\].set(\\$attr, $value);"
}
