proc makeAprilTagDetector {TAG_FAMILY} {
    set cc [C]
    $cc cflags -I./vendor/apriltag
    $cc endcflags ./vendor/apriltag/libapriltag.so
    $cc include <apriltag.h>
    $cc include <$TAG_FAMILY.h>
    $cc include <math.h>
    $cc include <assert.h>
    $cc code {
        static apriltag_detector_t *td;
        static apriltag_family_t *tf;
        static pthread_mutex_t tmutex;
    }
    # TODO: Factor this out.
    $cc struct Image {
        uint32_t width;
        uint32_t height;
        int components;
        uint32_t bytesPerRow;

        uint8_t* data;
    }

    $cc proc detectInit {} void {
        td = apriltag_detector_create();
        tf = ${TAG_FAMILY}_create();
        apriltag_detector_add_family_bits(td, tf, 1);
        td->nthreads = 1;
        pthread_mutex_init(&tmutex, NULL);
    }
    $cc proc detect {Image gray} Jim_Obj* {
        // FIXME: this mutex holds up the whole system.
        pthread_mutex_lock(&tmutex);

        assert(gray.components == 1);
        image_u8_t im = (image_u8_t) { .width = gray.width, .height = gray.height, .stride = gray.bytesPerRow, .buf = gray.data };

        zarray_t *detections = apriltag_detector_detect(td, &im);
        int detectionCount = zarray_size(detections);

        Jim_Obj* detectionObjs[detectionCount];
        for (int i = 0; i < detectionCount; i++) {
            apriltag_detection_t *det;
            zarray_get(detections, i, &det);

            int size = sqrt((det->p[0][0] - det->p[1][0])*(det->p[0][0] - det->p[1][0]) + (det->p[0][1] - det->p[1][1])*(det->p[0][1] - det->p[1][1]));
            double angle = atan2(-1 * (det->p[1][1] - det->p[0][1]), det->p[1][0] - det->p[0][0]);
            detectionObjs[i] = Jim_ObjPrintf("id %d c {%f %f} p {{%f %f} {%f %f} {%f %f} {%f %f}} size %d angle %f",
                                             det->id,
                                             det->c[0], det->c[1],
                                             det->p[0][0], det->p[0][1],
                                             det->p[1][0], det->p[1][1],
                                             det->p[2][0], det->p[2][1],
                                             det->p[3][0], det->p[3][1],
                                             size, angle);
        }

        zarray_destroy(detections);

        pthread_mutex_unlock(&tmutex);

        Jim_Obj* result = Jim_NewListObj(interp, detectionObjs, detectionCount);
        return result;
    }
    $cc proc detectCleanup {} void {
        ${TAG_FAMILY}_destroy(tf);
        apriltag_detector_destroy(td);
    }

    set detector [$cc compile]
    $detector detectInit
    return $detector
}

set tagFamily "tagStandard52h13"
set entireFrameDetector [makeAprilTagDetector $tagFamily]
set incrementalDetector [makeAprilTagDetector $tagFamily]

# Entire-frame tag detector:
When (serially) camera /camera/ has frame /frame/ at timestamp /frameTs/ {
    tracy zoneBegin
    tracy zoneName "entireFrameDetect: $frameTs"

    set aprilTime [time {
        set tags [$entireFrameDetector detect $frame]
    }]

    HoldStatement! [list $this entire-frame] \
        [list $this claims [list $this entire-frame] detects tags $tags on camera $camera \
             at timestamp $frameTs in time $aprilTime]

    tracy zoneEnd
}

# Incremental tag detector (looks at regions where there were tags
# seen recently):
When (serially) camera /camera/ has frame /frame/ at timestamp /frameTs/ {
    tracy zoneBegin
    tracy zoneName "incrementalDetect: $frameTs"

    # Query all the existing tag detections that are out there.
    # Find the most recent detection of each tag; will use these to
    # give us regions of interest to do partial scans on the new
    # camera frame.
    set dets [dict create]
    ForEach! tag /id/ has detection /det/ on camera $camera at timestamp /timestamp/ {
        if {([dict exists $dets $id] && [dict get $dets $id timestamp] < $timestamp) ||
            ![dict exists $dets $id]} {

            dict set dets $id $det
            dict set dets $id timestamp $timestamp
        }
    }

    proc subimage {im x y subwidth subheight} {
        dict with im {
            set x [expr {int($x)}]
            set y [expr {int($y)}]
            set subdata [expr {[lindex $data 1] + ($y*$width + $x) * $components}]
            dict create \
                width [expr {int($subwidth)}] \
                height [expr {int($subheight)}] \
                components $components \
                bytesPerRow $bytesPerRow \
                data [format "(uint8_t*) 0x%x" $subdata]
        }
    }

    namespace import ::math::min ::math::max
    set tags [list]
    set frameWidth [dict get $frame width]
    set frameHeight [dict get $frame height]
    set aprilTime 0
    dict for {id prevDet} $dets {
        set corners [dict get $prevDet p]

        set x $(floor([min {*}[lmap corner $corners {lindex $corner 0}]]))
        set y $(floor([min {*}[lmap corner $corners {lindex $corner 1}]]))
        set x1 $(ceil([max {*}[lmap corner $corners {lindex $corner 0}]]))
        set y1 $(ceil([max {*}[lmap corner $corners {lindex $corner 1}]]))

        set width [- $x1 $x]; set height [- $y1 $y]
        set x [max [- $x $width] 0]
        set y [max [- $y $height] 0]
        set x1 [min [+ $x1 $width] $frameWidth]
        set y1 [min [+ $y1 $height] $frameHeight]

        set subimage [subimage $frame $x $y [- $x1 $x] [- $y1 $y]]
        set aprilTime [+ $aprilTime [baretime {
            foreach tag [$incrementalDetector detect $subimage] {
                dict with tag {
                    set c [vec2 add $c [list $x $y]]
                    set p [lmap corner $p {vec2 add $corner [list $x $y]}]
                }
                lappend tags $tag
            }
        }]]
    }

    HoldStatement! [list $this incremental] \
        [list $this claims [list $this incremental] detects tags $tags on camera $camera \
             at timestamp $frameTs in time $aprilTime]

    tracy zoneEnd
}

# Integrate all the tag detections.
When the collected matches for \
    [list /someone/ detects tags /tags/ on camera /camera/ \
         at timestamp /timestamp/ in time /aprilTime/] are /matches/ {

    set now [expr {[clock milliseconds] / 1000.0}]

    set latestTagDets [dict create]
    foreach match $matches {
        set timestamp [dict get $match timestamp]
        set camera [dict get $match camera]
        foreach tag [dict get $match tags] {
            dict set tag timestamp $timestamp
            dict set tag camera $camera
            dict with tag {
                if {![dict exists $latestTagDets $id] ||
                    [dict get $latestTagDets $id timestamp] < $timestamp} {

                    dict set latestTagDets $id $tag
                }
            }
        }
    }

    dict for {id det} $latestTagDets {
        # We want to not immediately destroy the entire drawlist /
        # downstream statement set from the previous detection (give
        # the new detection some time to converge first).
        Claim (keep 8ms) tag $id has detection $det on camera [dict get $det camera] \
            at timestamp [dict get $det timestamp]
    }
    set aprilTime [lmap m $matches {dict get $m aprilTime}]
    Claim the AprilTag time is $aprilTime
}
