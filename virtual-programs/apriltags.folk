proc makeAprilTagDetector {TAG_FAMILY} {
    set cc [C]
    $cc cflags -I./vendor/apriltag
    $cc endcflags ./vendor/apriltag/libapriltag.so
    $cc include <apriltag.h>
    $cc include <$TAG_FAMILY.h>
    $cc include <math.h>
    $cc include <assert.h>
    $cc code {
        static apriltag_detector_t *td;
        static apriltag_family_t *tf;
        static pthread_mutex_t tmutex;
    }
    # TODO: Factor this out.
    $cc struct Image {
        uint32_t width;
        uint32_t height;
        int components;
        uint32_t bytesPerRow;

        uint8_t* data;
    }

    $cc proc detectInit {} void {
        td = apriltag_detector_create();
        tf = ${TAG_FAMILY}_create();
        apriltag_detector_add_family_bits(td, tf, 1);
        td->nthreads = 2;
        pthread_mutex_init(&tmutex, NULL);
    }
    $cc proc detect {Image gray} Jim_Obj* {
        // FIXME: this mutex holds up the whole system.
        pthread_mutex_lock(&tmutex);

        assert(gray.components == 1);
        image_u8_t im = (image_u8_t) { .width = gray.width, .height = gray.height, .stride = gray.bytesPerRow, .buf = gray.data };

        zarray_t *detections = apriltag_detector_detect(td, &im);
        int detectionCount = zarray_size(detections);

        Jim_Obj* detectionObjs[detectionCount];
        for (int i = 0; i < detectionCount; i++) {
            apriltag_detection_t *det;
            zarray_get(detections, i, &det);

            int size = sqrt((det->p[0][0] - det->p[1][0])*(det->p[0][0] - det->p[1][0]) + (det->p[0][1] - det->p[1][1])*(det->p[0][1] - det->p[1][1]));
            double angle = atan2(-1 * (det->p[1][1] - det->p[0][1]), det->p[1][0] - det->p[0][0]);
            detectionObjs[i] = Jim_ObjPrintf("id %d c {%f %f} p {{%f %f} {%f %f} {%f %f} {%f %f}} size %d angle %f",
                                             det->id,
                                             det->c[0], det->c[1],
                                             det->p[0][0], det->p[0][1],
                                             det->p[1][0], det->p[1][1],
                                             det->p[2][0], det->p[2][1],
                                             det->p[3][0], det->p[3][1],
                                             size, angle);
        }

        zarray_destroy(detections);

        pthread_mutex_unlock(&tmutex);

        Jim_Obj* result = Jim_NewListObj(interp, detectionObjs, detectionCount);
        return result;
    }
    $cc proc detectCleanup {} void {
        ${TAG_FAMILY}_destroy(tf);
        apriltag_detector_destroy(td);
    }

    set detector [$cc compile]
    $detector detectInit
    return $detector
}

set tagFamily "tagStandard52h13"

# Plain detector. Runs on entire camera frame.
set detector [makeAprilTagDetector $tagFamily]

# Split detection into individual tag claims:
When /someone/ detects tags /tags/ on camera /camera/ at timestamp /ts/ in time /aprilTime/ {
    foreach det $tags {
        set id [dict get $det id]
        Claim tag $id has detection $det on camera $camera at timestamp $ts
    }
    # Claim the AprilTag time is $::aprilTime
}

while true {
    set results [Query! /someone/ claims camera /camera/ has frame /grayFrame/ at timestamp /ts/]
    if {[llength $results] == 0} { continue }

    # Use highest timestamp (latest) camera frame.
    set results [lsort -command [list apply {{a b} {
        expr {[dict get $a ts] < [dict get $b ts]}
    }}] $results]
    set latestResult [lindex $results end]
    dict with latestResult {
        set now [expr {[clock milliseconds] / 1000.0}]

        # puts stderr "now - ts: [expr {$now - $ts}]"
        # Do not process frames older than 25 frames (they're freed at 50 frames).
        if {$now - $ts > 0.016 * 25} { return }

        # Need to have a `detector` object available from all threads,
        # inside this scope.
        set aprilTime [time {
            set tags [$detector detect $grayFrame]
        }]
        # perfEvent didDetect

        # Holding for 16ms so that the tag detections overlap so that
        # you don't get re-Added.
        Hold! apriltags \
            [list virtual-programs/apriltags.folk claims $this detects tags $tags \
                 on camera $camera at timestamp $ts in time $aprilTime] 16
    }
}
