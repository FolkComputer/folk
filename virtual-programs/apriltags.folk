set makeAprilTagDetector {{TAG_FAMILY} {
    set detector AprilTagDetector_${TAG_FAMILY}
    namespace eval $detector {
        set TAG_FAMILY [uplevel {set TAG_FAMILY}]

        set cc [c create]

        $cc cflags -I$::env(HOME)/apriltag $::env(HOME)/apriltag/libapriltag.a
        $cc include <apriltag.h>
        $cc include <$TAG_FAMILY.h>
        $cc include <math.h>
        $cc include <assert.h>
        $cc code {
            apriltag_detector_t *td;
            apriltag_family_t *tf;
        }
        ::defineImageType $cc

        $cc proc detectInit {} void [csubst {
            td = apriltag_detector_create();
            tf = ${TAG_FAMILY}_create();
            apriltag_detector_add_family_bits(td, tf, 1);
            td->nthreads = 2;
        }]
        $cc proc detect {image_t gray} Tcl_Obj* {
            assert(gray.components == 1);
            image_u8_t im = (image_u8_t) { .width = gray.width, .height = gray.height, .stride = gray.bytesPerRow, .buf = gray.data };

            zarray_t *detections = apriltag_detector_detect(td, &im);
            int detectionCount = zarray_size(detections);

            Tcl_Obj* detectionObjs[detectionCount];
            for (int i = 0; i < detectionCount; i++) {
                apriltag_detection_t *det;
                zarray_get(detections, i, &det);

                detectionObjs[i] =
                    Tcl_ObjPrintf("id %d "
                                  "H {%f %f %f %f %f %f %f %f %f} "
                                  "c {%f %f} "
                                  "p {{%f %f} {%f %f} {%f %f} {%f %f}}",
                                  det->id,
                                  det->H->data[0], det->H->data[1], det->H->data[2],
                                  det->H->data[3], det->H->data[4], det->H->data[5],
                                  det->H->data[6], det->H->data[7], det->H->data[8],
                                  det->c[0], det->c[1],
                                  det->p[0][0], det->p[0][1],
                                  det->p[1][0], det->p[1][1],
                                  det->p[2][0], det->p[2][1],
                                  det->p[3][0], det->p[3][1]);
            }

            apriltag_detections_destroy(detections);
            Tcl_Obj* result = Tcl_NewListObj(detectionCount, detectionObjs);
            return result;
        }
        $cc proc detectCleanup {} void [csubst {
            ${TAG_FAMILY}_destroy(tf);
            apriltag_detector_destroy(td);
        }]

        c loadlib $::env(HOME)/apriltag/libapriltag.so
        $cc compile

        namespace export *
        namespace ensemble create
    }

    $detector detectInit
    return $detector
}}

Claim the AprilTag detector maker is $makeAprilTagDetector

set tagFamily "tagStandard52h13"

# Plain detector. Runs on entire camera frame.
Start process {
    set detector [apply $makeAprilTagDetector $tagFamily]

    Wish $::thisProcess receives statements like \
        [list /someone/ claims camera /any/ has frame /grayFrame/ at timestamp /timestamp/]
    Wish $::thisProcess shares statements like \
        [list /someone/ claims /someone/ detects tags /tags/ on /camera/ \
             at /timestamp/ in time /aprilTime/]

    When camera /camera/ has frame /grayFrame/ at timestamp /timestamp/ {
        set aprilTime [time {
            set tags [$detector detect $grayFrame]
        }]
        Claim main-detector detects tags $tags on $camera \
            at $timestamp in time $aprilTime
    }
}

# Incremental detector. Looks at regions where there were tags in the
# old camera frame.
Start process {
    set detector [apply $makeAprilTagDetector $tagFamily]

    Wish $::thisProcess receives statements like \
        [list /someone/ claims camera /any/ has frame /grayFrame/ at timestamp /timestamp/]
    Wish $::thisProcess receives statements like \
        [list /someone/ claims main-detector detects tags /tags/ on /camera/ at /timestamp/ in time /aprilTime/]
    Wish $::thisProcess shares statements like \
        [list /someone/ claims incremental-detector detects tags /tags/ on /camera/ at /timestamp/ in time /aprilTime/]
    Wish $::thisProcess shares statements like \
        [list /someone/ wishes /something/ is labelled /text/]
    Wish $::thisProcess shares statements like \
        [list /someone/ wishes /something/ displays camera slice /slice/]

    proc subimage {im x y subwidth subheight} {
        dict with im {
            set x [expr {int($x)}]
            set y [expr {int($y)}]
            set subdata [expr {[lindex $data 1] + ($y*$width + $x) * $components}]
            dict create \
                width [int $subwidth] \
                height [int $subheight] \
                components $components \
                bytesPerRow $bytesPerRow \
                data [format "(uint8_t*) 0x%x" $subdata]
        }
    }

    When camera /camera/ has frame /grayFrame/ at timestamp /timestamp/ & \
         main-detector detects tags /prevTags/ on /camera/ at /something/ in time /something/ {

        set tags [list]
        set frameWidth [dict get $grayFrame width]
        set frameHeight [dict get $grayFrame height]
        set aprilTime 0
        foreach prevTag $prevTags {
            set corners [dict get $prevTag p]
            set x [min {*}[lmap corner $corners {lindex $corner 0}]]
            set y [min {*}[lmap corner $corners {lindex $corner 1}]]
            set x1 [max {*}[lmap corner $corners {lindex $corner 0}]]
            set y1 [max {*}[lmap corner $corners {lindex $corner 1}]]

            set width [- $x1 $x]; set height [- $y1 $y]
            set x [max [- $x $width] 0]
            set y [max [- $y $height] 0]
            set x1 [min [+ $x1 $width] $frameWidth]
            set y1 [min [+ $y1 $height] $frameHeight]

            set subimage [subimage $grayFrame $x $y [- $x1 $x] [- $y1 $y]]
            set aprilTime [+ $aprilTime [baretime {
                foreach tag [$detector detect $subimage] {
                    dict with tag {
                        set c [vec2 add $c [list $x $y]]
                        set p [lmap corner $p {vec2 add $corner [list $x $y]}]
                    }
                    lappend tags $tag
                }
            }]]
        }

        Claim incremental-detector detects tags $tags on $camera \
            at $timestamp in time $aprilTime
    }
}

# This cache is used to remember the last seen position of each tag,
# so that if the incremental detector blinks out, we still use the
# tag's last-found position from it, instead of the older position
# from the full detector, so as you move a tag its position doesn't
# glitch backward.
set ::tagsCache [dict create]
# TODO: Garbage-collect this cache.

set ::aprilTime none
When the collected matches for [list /someone/ detects tags /tags/ on /camera/ at /timestamp/ in time /aprilTime/] are /matches/ {
    set tagsSeen [dict create]
    foreach match $matches {
        set camera [dict get $match camera]
        set timestamp [dict get $match timestamp]
        foreach tag [dict get $match tags] {
            set id [dict get $tag id]

            dict set tag camera $camera
            dict set tag timestamp $timestamp

            if {[dict exists $::tagsCache $id] &&
                [dict get $::tagsCache $id timestamp] > $timestamp} {
                set tag [dict get $::tagsCache $id]
            } else {
                dict set ::tagsCache $id $tag
            }
            dict set tagsSeen $id $tag
        }
    }

    dict for {id tag} $tagsSeen {
        Claim tag $id has detection $tag on [dict get $tag camera] \
            at [dict get $tag timestamp]
    }
    set ::aprilTime [lmap m $matches {dict get $m aprilTime}]
    Claim the AprilTag time is $::aprilTime
}
