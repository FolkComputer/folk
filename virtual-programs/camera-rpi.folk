set makeCamera {
    set cpp [C++]
    $cpp include <iostream>
    $cpp include <iomanip>
    $cpp include <mutex>
    $cpp include <queue>
    $cpp include <sys/mman.h>

    $cpp include <libcamera/libcamera.h>
    # osnr: HACK: just throwing any possible path in.
    $cpp cflags -I/usr/local/include/libcamera -I/usr/include/libcamera
    $cpp endcflags -lcamera

    # TODO: Factor this out.
    $cpp struct Image {
        uint32_t width;
        uint32_t height;
        int components;
        uint32_t bytesPerRow;

        uint8_t* data;
    }
    $cpp code {
        using namespace libcamera;

        std::unique_ptr<CameraManager> cm;
        std::shared_ptr<Camera> camera;
	std::unique_ptr<CameraConfiguration> config;
	FrameBufferAllocator *allocator;

        // This vector always owns all the request objects.
	std::vector<std::unique_ptr<Request>> requests;

        std::mutex completedRequestsMutex;
        std::queue<Request *> completedRequests;

        uint32_t frameWidth;
        uint32_t frameHeight;
        uint32_t frameBytesPerRow;

        static void requestComplete(Request *request);
    }
    $cpp proc cameraOpen {char* id int width int height} void {
        cm = std::make_unique<CameraManager>();
        cm->start();

        std::cout << "camera-rpi: cameras:" << std::endl;
	for (auto const &camera : cm->cameras()) {
            std::cout << " - " << camera->id() << std::endl;
        }

        camera = cm->get(id);
        camera->acquire();

        config = camera->generateConfiguration({ StreamRole::Viewfinder });
        StreamConfiguration &streamConfig = config->at(0);
        streamConfig.size = Size(width, height);
        // streamConfig.pixelFormat = PixelFormat.fromString("YUV420");

        config->validate();
        frameWidth = streamConfig.size.width;
        frameHeight = streamConfig.size.height;
        frameBytesPerRow = streamConfig.stride;
        std::cout << "frameWidth: " << frameWidth << " frameHeight: " << frameHeight << std::endl;

	camera->configure(config.get());

        allocator = new FrameBufferAllocator(camera);
	for (StreamConfiguration &cfg : *config) {
            int ret = allocator->allocate(cfg.stream());
            if (ret < 0) {
                FOLK_ERROR("Can't allocate buffers");
            }

            size_t allocated = allocator->buffers(cfg.stream()).size();
            std::cout << "camera-rpi: Allocated " << allocated << " buffers for stream" << std::endl;

            // for (PixelFormat &format : cfg.formats().pixelformats()) {
                // std::cout << "camera-rpi: Stream supports format " << format << std::endl;
                // for (Size &size : cfg.formats().sizes(format)) {
                //     std::cout << "  -> supports size " << size << std::endl;
                // }
            // }
	}

        Stream *stream = streamConfig.stream();
        assert(streamConfig.pixelFormat.toString() == "XRGB8888");

        const std::vector<std::unique_ptr<FrameBuffer>> &buffers = allocator->buffers(stream);
	for (unsigned int i = 0; i < buffers.size(); ++i) {
		std::unique_ptr<Request> request = camera->createRequest();
		if (!request) {
                    FOLK_ERROR("camera-rpi: Can't create request");
		}

		const std::unique_ptr<FrameBuffer> &buffer = buffers[i];
		int ret = request->addBuffer(stream, buffer.get());
		if (ret < 0) {
                    FOLK_ERROR("camera-rpi: Can't set buffer for request");
		}

		requests.push_back(std::move(request));
	}

	camera->requestCompleted.connect(requestComplete);

        camera->start();
	for (std::unique_ptr<Request> &request : requests) {
            camera->queueRequest(request.get());
        }
    }

    $cpp code {
        static void requestComplete(Request *request) {
            if (request->status() == Request::RequestCancelled) {
		return;
            }

            completedRequestsMutex.lock();
            completedRequests.push(request);
            completedRequestsMutex.unlock();
        }

        // static void imageCopyRgb(Image to, Image from) {
        //     FOLK_ENSURE(from.components == 4);
        //     FOLK_ENSURE(from.width == to.width);
        //     FOLK_ENSURE(from.height == to.height);

        //     for (uint32_t y = 0; y < from.height; y++) {
        //         for (uint32_t x = 0; x < from.width; x++) {
        //             uint32_t i = (y * from.bytesPerRow) + x * 4;
        //             // FIXME: XRGB8888 assumed
        //             uint8_t b = from.data[i + 0];
        //             uint8_t g = from.data[i + 1];
        //             uint8_t r = from.data[i + 2];
        //             to.data[y * to.bytesPerRow + x*3 + 0] = r;
        //             to.data[y * to.bytesPerRow + x*3 + 1] = g;
        //             to.data[y * to.bytesPerRow + x*3 + 2] = b;
        //         }
        //     }
        // }
        static void imageCopyGray(Image to, Image from) {
            FOLK_ENSURE(from.components == 4);
            FOLK_ENSURE(to.components == 1);
            FOLK_ENSURE(from.width == to.width);
            FOLK_ENSURE(from.height == to.height);

            for (uint32_t y = 0; y < from.height; y++) {
                for (uint32_t x = 0; x < from.width; x++) {
                    uint32_t i = (y * from.bytesPerRow) + x * 4;
                    // FIXME: XRGB8888 assumed
                    uint32_t b = from.data[i + 0];
                    uint32_t g = from.data[i + 1];
                    uint32_t r = from.data[i + 2];
                    // from https://mina86.com/2021/rgb-to-greyscale/
                    uint32_t yy = 3567664 * r + 11998547 * g + 1211005 * b;
                    to.data[y * to.bytesPerRow + x] = ((yy + (1 << 23)) >> 24);
                }
            }
        }

        static void processRequestAndCopyFrame(Request *request, Image im) {
            /*
             * When a request has completed, it is populated with a metadata control
             * list that allows an application to determine various properties of
             * the completed request. This can include the timestamp of the Sensor
             * capture, or its gain and exposure values, or properties from the IPA
             * such as the state of the 3A algorithms.
             *
             * ControlValue types have a toString, so to examine each request, print
             * all the metadata for inspection. A custom application can parse each
             * of these items and process them according to its needs.
             */
            // const ControlList &requestMetadata = request->metadata();
            // for (const auto &ctrl : requestMetadata) {
            //         const ControlId *id = controls::controls.at(ctrl.first);
            //         const ControlValue &value = ctrl.second;

            //         std::cout << "\t" << id->name() << " = " << value.toString()
            //                   << std::endl;
            // }

            const Request::BufferMap &buffers = request->buffers();
            assert(buffers.size() == 1);
            for (auto bufferPair : buffers) {
                    // (Unused) Stream *stream = bufferPair.first;
                    FrameBuffer *buffer = bufferPair.second;
                    const FrameMetadata &metadata = buffer->metadata();

                    assert(metadata.planes().size() == 1);
                    assert(buffer->planes().size() == 1);
                    
                    auto &plane = buffer->planes()[0];
                    int fd = plane.fd.get();

                    void *addr = mmap64(NULL, plane.length, PROT_READ, MAP_PRIVATE, fd, 0);
                    if (addr == MAP_FAILED) {
                        FOLK_ERROR("camera-rpi: MAP_FAILED");
                    }
                    void *planeData = (uint8_t *)addr + plane.offset;
                    Image planeIm = {
                        .width = frameWidth, .height = frameHeight,
                        .components = 4, .bytesPerRow = frameBytesPerRow,
                        .data = (uint8_t *)planeData
                    };
                    imageCopyGray(im, planeIm);
                    munmap(addr, plane.length);
            }
        }
    }

    $cpp proc newImage {} Image {
        uint32_t width = frameWidth;
        uint32_t height = frameHeight;
        int components = 1;
        uint8_t *data = (uint8_t *) malloc(width*components*height);
        return (Image) {
            .width = width,
            .height = height,
            .components = components,
            .bytesPerRow = width*components,
            .data = data
        };
    }
    $cpp proc freeImage {Image image} void {
        free(image.data);
    }

    $cpp proc grayFrame {} Image {
        Request *latestRequest = nullptr;

        // We want to drain the queue of completed requests.
        completedRequestsMutex.lock();
        while (!completedRequests.empty()) {
            if (latestRequest != nullptr) {
                // We're skipping this request, because we have a
                // newer one in the queue. Requeue it.
                latestRequest->reuse(Request::ReuseBuffers);
                camera->queueRequest(latestRequest);
            }
            latestRequest = completedRequests.front();
            completedRequests.pop();
        }
        completedRequestsMutex.unlock();

        if (latestRequest == nullptr) {
            FOLK_ERROR("No new frame yet");
        }

        Image im = newImage();
        processRequestAndCopyFrame(latestRequest, im);

        /* Re-queue the Request to the camera. */
        latestRequest->reuse(Request::ReuseBuffers);
        camera->queueRequest(latestRequest);

        return im;
    }

    $cpp compile
}

When /someone/ wishes $::thisNode uses camera /cameraPath/ with /...options/ {
    if {![string match "/base*" $cameraPath]} { return }

    puts "camera-rpi: Running."

    set width [dict get $options width]
    set height [dict get $options height]

    namespace eval Camera $makeCamera
    Camera::cameraOpen $cameraPath $width $height

    # TODO: report actual width and height from libcamera
    Claim camera $cameraPath has width $width height $height

    puts "camera-rpi: $cameraPath ($options) (tid [getTid]) booted at [clock milliseconds]"

    set ::oldFrames [list]
    When $::thisProcess has step count /c/ {
        try {
            set frame [Camera::grayFrame]
        } on error e { return }

        Hold! camera [list $this claims camera $cameraPath has frame $frame at timestamp [expr {[clock milliseconds] / 1000.0}]]

        lappend ::oldFrames $frame
        if {[llength $::oldFrames] >= 10} {
            set ::oldFrames [lassign $::oldFrames oldestFrame]
            Camera::freeImage $oldestFrame
        }
    }
}

# TODO: remove this; useful for compatibility with current metrics but
# doesn't work for multicam
set ::cameraTime none
When camera /any/ has camera time /cameraTime/ {
    set ::cameraTime $cameraTime
}
