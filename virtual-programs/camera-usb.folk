set makeCamera {
    rename [c create] camc

    camc include <string.h>
    camc include <math.h>

    camc include <errno.h>
    camc include <fcntl.h>
    camc include <sys/ioctl.h>
    camc include <sys/mman.h>
    camc include <asm/types.h>
    camc include <linux/videodev2.h>

    camc include <stdint.h>
    camc include <stdlib.h>

    camc include <jpeglib.h>

    camc struct buffer_t {
        uint8_t* start;
        size_t length;
    }
    camc struct camera_t {
        int fd;

        uint32_t width;
        uint32_t height;

        size_t buffer_count;
        buffer_t* buffers;
        buffer_t head;
    }

    camc code {
        void quit(const char* msg) {
            fprintf(stderr, "[%s] %d: %s\n", msg, errno, strerror(errno));
            exit(1);
        }

        int xioctl(int fd, int request, void* arg) {
            for (int i = 0; i < 100; i++) {
                int r = ioctl(fd, request, arg);
                if (r != -1 || errno != EINTR) return r;
                printf("[%x][%d] %s\n", request, i, strerror(errno));
            }
            return -1;
        }
    }
    defineImageType camc

    camc proc cameraOpen {char* device int width int height} camera_t* {
        printf("device [%s]\n", device);
        int fd = open(device, O_RDWR, 0);
        if (fd == -1) quit("open");
        camera_t* camera = ckalloc(sizeof (camera_t));
        camera->fd = fd;
        camera->width = width;
        camera->height = height;
        camera->buffer_count = 0;
        camera->buffers = NULL;
        camera->head.length = 0;
        camera->head.start = NULL;
        return camera;
    }

    camc proc cameraInit {camera_t* camera uint32_t requested_buffer_count } void {
        struct v4l2_capability cap;
        if (xioctl(camera->fd, VIDIOC_QUERYCAP, &cap) == -1) quit("VIDIOC_QUERYCAP");
        if (!(cap.capabilities & V4L2_CAP_VIDEO_CAPTURE)) quit("no capture");
        if (!(cap.capabilities & V4L2_CAP_STREAMING)) quit("no streaming");

        struct v4l2_format format = {0};
        format.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
        format.fmt.pix.width = camera->width;
        format.fmt.pix.height = camera->height;
        // All(?) USB webcams we've encountered use this format.
        format.fmt.pix.pixelformat = V4L2_PIX_FMT_MJPEG;
        format.fmt.pix.field = V4L2_FIELD_NONE;
        int ret;
        do {
            ret = xioctl(camera->fd, VIDIOC_S_FMT, &format);
        } while (ret == EBUSY);
        if (ret == -1) quit("VIDIOC_S_FMT");

        /* if (!camera->uses_jpeg_format && format.fmt.pix.bytesperline != camera->width) { */
        /*     fprintf(stderr, "cameraInit: interline padding not supported " */
        /*             "(bytesperline = %u, camera->width = %u)\n", */
        /*             format.fmt.pix.bytesperline, */
        /*             camera->width); */
        /*     exit(1); */
        /* } */

        struct v4l2_requestbuffers req = {0};
        req.count = requested_buffer_count;
        req.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
        req.memory = V4L2_MEMORY_MMAP;
        if (xioctl(camera->fd, VIDIOC_REQBUFS, &req) == -1) quit("VIDIOC_REQBUFS");
        camera->buffer_count = req.count;
        camera->buffers = calloc(req.count, sizeof (buffer_t));

        printf("LATENCY: Camera buffer count: %d\n", req.count);
        fflush(stdout);

        struct v4l2_streamparm streamparm = {0};
        streamparm.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
        if (xioctl(camera->fd, VIDIOC_G_PARM, &streamparm) == -1) quit("VIDIOC_G_PARM");
        if (streamparm.parm.capture.capability & V4L2_CAP_TIMEPERFRAME) {
            int req_rate_numerator = 1;
            int req_rate_denominator = 60;
            streamparm.parm.capture.timeperframe.numerator = req_rate_numerator;
            streamparm.parm.capture.timeperframe.denominator = req_rate_denominator;
            if (xioctl(camera->fd, VIDIOC_S_PARM, &streamparm) == -1) { quit("VIDIOC_S_PARM"); }

            if (streamparm.parm.capture.timeperframe.numerator != req_rate_denominator ||
                streamparm.parm.capture.timeperframe.denominator != req_rate_numerator) {
                fprintf(stderr,
                        "the driver changed the time per frame from "
                        "%d/%d to %d/%d\n",
                        req_rate_denominator, req_rate_numerator,
                        streamparm.parm.capture.timeperframe.numerator,
                        streamparm.parm.capture.timeperframe.denominator);
            }
        }

        size_t buf_max = 0;
        for (size_t i = 0; i < camera->buffer_count; i++) {
            struct v4l2_buffer buf;
            memset(&buf, 0, sizeof buf);
            buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
            buf.memory = V4L2_MEMORY_MMAP;
            buf.index = i;
            if (xioctl(camera->fd, VIDIOC_QUERYBUF, &buf) == -1)
            quit("VIDIOC_QUERYBUF");
            if (buf.length > buf_max) buf_max = buf.length;
            camera->buffers[i].length = buf.length;
            camera->buffers[i].start = 
              mmap(NULL, buf.length, PROT_READ | PROT_WRITE, MAP_SHARED,
                 camera->fd, buf.m.offset);
            if (camera->buffers[i].start == MAP_FAILED) quit("mmap");
        }
        camera->head.start = ckalloc(buf_max);

        printf("camera %d; bufcount %zu\n", camera->fd, camera->buffer_count);
    }

    camc proc cameraStart {camera_t* camera} void {
        for (size_t i = 0; i < camera->buffer_count; i++) {
            struct v4l2_buffer buf;
            memset(&buf, 0, sizeof buf);
            buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
            buf.memory = V4L2_MEMORY_MMAP;
            buf.index = i;
            if (xioctl(camera->fd, VIDIOC_QBUF, &buf) == -1) quit("VIDIOC_QBUF");
            printf("camera_start(%zu): %s\n", i, strerror(errno));
        }

        enum v4l2_buf_type type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
        if (xioctl(camera->fd, VIDIOC_STREAMON, &type) == -1) 
        quit("VIDIOC_STREAMON");
    }

    camc code {
        int camera_capture(camera_t* camera) {
            struct v4l2_buffer buf;
            memset(&buf, 0, sizeof buf);
            buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
            buf.memory = V4L2_MEMORY_MMAP;
            if (xioctl(camera->fd, VIDIOC_DQBUF, &buf) == -1) {
                fprintf(stderr, "camera_capture: VIDIOC_DQBUF failed: %d: %s\n", errno, strerror(errno));
                return 0;
            }
            memcpy(camera->head.start, camera->buffers[buf.index].start, buf.bytesused);
            camera->head.length = buf.bytesused;
            if (xioctl(camera->fd, VIDIOC_QBUF, &buf) == -1) {
                fprintf(stderr, "camera_capture: VIDIOC_QBUF failed: %d: %s\n", errno, strerror(errno));
                return 0;
            }
            return 1;
        }
    }

    camc proc cameraFrame {camera_t* camera} int {
        struct timeval timeout;
        timeout.tv_sec = 1;
        timeout.tv_usec = 0;
        fd_set fds;
        FD_ZERO(&fds);
        FD_SET(camera->fd, &fds);
        int r = select(camera->fd + 1, &fds, 0, 0, &timeout);
        // printf("r: %d\n", r);
        if (r == -1) quit("select");
        if (r == 0) {
            printf("selection failed of fd %d\n", camera->fd);
            return 0;
        }
        return camera_capture(camera);
    }

    camc proc cameraDecompressRgb {camera_t* camera image_t dest} void {
        struct jpeg_decompress_struct cinfo;
        struct jpeg_error_mgr jerr;
        cinfo.err = jpeg_std_error(&jerr);
        jpeg_create_decompress(&cinfo);
        jpeg_mem_src(&cinfo, camera->head.start, camera->head.length);
        if (jpeg_read_header(&cinfo, TRUE) != 1) {
            printf("Fail\n");
            exit(1);
        }
        jpeg_start_decompress(&cinfo);

        while (cinfo.output_scanline < cinfo.output_height) {
            unsigned char *buffer_array[1];
            buffer_array[0] = dest.data + (cinfo.output_scanline) * dest.width * cinfo.output_components;
            jpeg_read_scanlines(&cinfo, buffer_array, 1);
        }
        jpeg_finish_decompress(&cinfo);
        jpeg_destroy_decompress(&cinfo);
    }
    camc proc cameraDecompressGrayJpeg {camera_t* camera image_t dest} void {
        struct jpeg_decompress_struct cinfo;
        struct jpeg_error_mgr jerr;
        cinfo.err = jpeg_std_error(&jerr);
        jpeg_create_decompress(&cinfo);
        jpeg_mem_src(&cinfo, camera->head.start, camera->head.length);
        if (jpeg_read_header(&cinfo, TRUE) != 1) {
            printf("Fail\n");
            exit(1);
        }
        cinfo.out_color_space = JCS_GRAYSCALE;
        jpeg_start_decompress(&cinfo);

        while (cinfo.output_scanline < cinfo.output_height) {
            unsigned char *buffer_array[1];
            buffer_array[0] = dest.data + (cinfo.output_scanline) * dest.width * cinfo.output_components;
            jpeg_read_scanlines(&cinfo, buffer_array, 1);
        }
        jpeg_finish_decompress(&cinfo);
        jpeg_destroy_decompress(&cinfo);
    }

    if {[namespace exists ::Heap]} {
        camc import ::Heap::cc folkHeapAlloc as folkHeapAlloc
        camc import ::Heap::cc folkHeapFree as folkHeapFree
    } else {
        camc code {
            #define folkHeapAlloc malloc
            #define folkHeapFree free
        }
    }
    camc proc newImage {camera_t* camera int components} image_t {
        uint8_t* data = folkHeapAlloc(camera->width*components*camera->height);
        return (image_t) {
            .width = camera->width,
            .height = camera->height,
            .components = components,
            .bytesPerRow = camera->width*components,
            .data = data
        };
    }
    camc proc freeImage {image_t image} void {
        folkHeapFree(image.data);
    }

    camc proc setExposure {camera_t* camera int value} void {
        struct v4l2_control c;

        c.id = V4L2_CID_EXPOSURE_AUTO;
        c.value = V4L2_EXPOSURE_MANUAL;
        FOLK_ENSURE(xioctl(camera->fd, VIDIOC_S_CTRL, &c) == 0);

        c.id = V4L2_CID_EXPOSURE_ABSOLUTE;
        c.value = value;
        FOLK_ENSURE(xioctl(camera->fd, VIDIOC_S_CTRL, &c) == 0);
    }
    camc proc setExposureAuto {camera_t* camera} void {
        struct v4l2_control c;
        c.id = V4L2_CID_EXPOSURE_AUTO;
        c.value = V4L2_EXPOSURE_APERTURE_PRIORITY;
        FOLK_ENSURE(xioctl(camera->fd, VIDIOC_S_CTRL, &c) == 0);
    }

    if {$::tcl_platform(os) eq "Darwin"} {
        c loadlib "/opt/homebrew/lib/libjpeg.dylib"
    } else {
        c loadlibLd libjpeg.so
    }
    camc compile

    proc new {device width height bufferCount } {
        set camera [cameraOpen $device $width $height]
        cameraInit $camera $bufferCount
        cameraStart $camera
        # skip 5 frames for booting a cam
        for {set i 0} {$i < 5} {incr i} {
            cameraFrame $camera
        }
        return $camera
    }
    proc frame {camera} {
        if {![cameraFrame $camera]} {
            error "Failed to capture from camera"
        }
        set image [newImage $camera 3]
        cameraDecompressRgb $camera $image
        return $image
    }
    proc grayFrame {camera} {
        if {![cameraFrame $camera]} {
            error "Failed to capture from camera"
        }
        set image [newImage $camera 1]
        cameraDecompressGrayJpeg $camera $image
        return $image
    }
}

When /someone/ wishes $::thisNode uses camera /cameraPath/ with /...options/ {
    if {![string match "/dev*" $cameraPath]} { return }

    set width [dict get $options width]
    set height [dict get $options height]
    set bufferCount [dict_getdef $options bufferCount 2]

    if {[dict exists $options crop]} {
        set crop [dict get $options crop]
    }
    Start process "camera $cameraPath $options" {
        # HACK: we should share this
        proc subimage {im x y subwidth subheight} {
            dict with im {
                set x [expr {int($x)}]
                set y [expr {int($y)}]
                set subdata [expr {[lindex $data 1] + ($y*$width + $x) * $components}]
                dict create \
                    width $subwidth \
                    height $subheight \
                    components $components \
                    bytesPerRow $bytesPerRow \
                    data [format "(uint8_t*) 0x%x" $subdata]
            }
        }

        Wish $::thisProcess shares statements like \
            [list /someone/ claims camera $cameraPath /...anything/]
        Wish $::thisProcess receives statements like \
            [list /someone/ wishes camera $cameraPath uses exposure time /exposureTimeUs/ us]

        namespace eval Camera $makeCamera
        set camera [Camera::new $cameraPath $width $height $bufferCount]

        # TODO: report actual width and height from v4l2
        if {[info exists crop]} {
            Claim camera $cameraPath has width [dict get $crop width] height [dict get $crop height]
        } else {
            Claim camera $cameraPath has width $width height $height
        }

        puts "camera-usb: $cameraPath ($options) (tid [getTid]) booted at [clock milliseconds]"

        When /someone/ wishes camera $cameraPath uses exposure time /exposureTimeUs/ us {
            if {$exposureTimeUs eq "auto"} {
                Camera::setExposureAuto $camera
            } else {
                Camera::setExposure $camera [expr {int($exposureTimeUs / 100)}]
            }
        }

        set ::oldFrames [list]
        When $::thisProcess has step count /c/ {
            set frame [Camera::grayFrame $camera]
            if {[info exists crop]} {
                dict with crop {
                    set cropped [subimage $frame $x $y $width $height]
                }
            } else {
                set cropped $frame
            }
            Hold {
                Claim camera $cameraPath has camera time $::stepTime
                Claim camera $cameraPath has frame $cropped at timestamp [expr {[clock milliseconds] / 1000.0}]
            }
            lappend ::oldFrames $frame
            if {[llength $::oldFrames] >= 10} {
                set ::oldFrames [lassign $::oldFrames oldestFrame]
                Camera::freeImage $oldestFrame
            }
        }
    }
}

# TODO: remove this; useful for compatibility with current metrics but
# doesn't work for multicam
set ::cameraTime none
When camera /any/ has camera time /cameraTime/ {
    set ::cameraTime $cameraTime
}
