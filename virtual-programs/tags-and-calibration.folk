if {$::isLaptop} { return }

namespace eval ::Camera {
    variable WIDTH 1280
    variable HEIGHT 720
}

package require math::linearalgebra
namespace import ::math::linearalgebra::add \
	::math::linearalgebra::sub \
	::math::linearalgebra::matmul \
	::math::linearalgebra::scale \
	::math::linearalgebra::angle \
	::math::linearalgebra::solvePGauss

# camera (tag) point -> projection point
# calibration for Hex
if [catch {source "/home/folk/generated-calibration.tcl"}] {
  set points {
	{622 404 1706 1051}
	{624 650 1661 51}
	{1031 669 8 44}
	{1024 403 13 1146}
  }
} else {
  set points [list]
  foreach correspondence $generatedCalibration::points {
    lassign $correspondence cx cy dx dy
    lappend points [list [expr {double($cx)/$generatedCalibration::cameraWidth*$Camera::WIDTH}] \
                         [expr {double($cy)/$generatedCalibration::cameraHeight*$Camera::HEIGHT}] \
                         [expr {double($dx)/$generatedCalibration::displayWidth*$Display::WIDTH}] \
                         [expr {double($dy)/$generatedCalibration::displayHeight*$Display::HEIGHT}]]
  }
}
for {set i 0} {$i < [llength $points]} {incr i} {
    lassign [lindex $points $i] x$i y$i u$i v$i
}

set A [subst {
    {$x0 $y0 1 0   0   0 [expr -$x0*$u0] [expr -$y0*$u0]}
    {$x1 $y1 1 0   0   0 [expr -$x1*$u1] [expr -$y1*$u1]}
    {$x2 $y2 1 0   0   0 [expr -$x2*$u2] [expr -$y2*$u2]}
    {$x3 $y3 1 0   0   0 [expr -$x3*$u3] [expr -$y3*$u3]}
    {0   0   0 $x0 $y0 1 [expr -$x0*$v0] [expr -$y0*$v0]}
    {0   0   0 $x1 $y1 1 [expr -$x1*$v1] [expr -$y1*$v1]}
    {0   0   0 $x2 $y2 1 [expr -$x2*$v2] [expr -$y2*$v2]}
    {0   0   0 $x3 $y3 1 [expr -$x3*$v3] [expr -$y3*$v3]}
}]

set b [list $u0 $u1 $u2 $u3 $v0 $v1 $v2 $v3]

lassign [solvePGauss $A $b] a0 a1 a2 b0 b1 b2 c0 c1

set ::H [subst {
    {$a0 $a1 $a2}
    {$b0 $b1 $b2}
    {$c0 $c1 1}
}]
set ::Hinv [solvePGauss $::H [math::linearalgebra::mkIdentity 3]]

set cc [c create]

$cc include <stdlib.h>

$cc code [csubst {
  static float H[3][3] = {
    {$a0, $a1, $a2},
    {$b0, $b1, $b2},
    {$c0, $c1, 1},
  };
}]

$cc proc ::cameraToProjector {Tcl_Interp* interp Tcl_Obj* cameraPoint} Tcl_Obj* {
    int cameraPointLength;
    Tcl_Obj** cameraPointElements;
    if (Tcl_ListObjGetElements(interp, cameraPoint, &cameraPointLength, &cameraPointElements) != TCL_OK) {
      exit(1);
    }

    double cx, cy;
    if (Tcl_GetDoubleFromObj(interp, cameraPointElements[0], &cx) != TCL_OK) {
      exit(1);
    }
    if (Tcl_GetDoubleFromObj(interp, cameraPointElements[1], &cy) != TCL_OK) {
      exit(1);
    }

    double Hx, Hy, Hz;

    Hx = H[0][0] * cx + H[0][1] * cy + H[0][2] * 1.0;
    Hy = H[1][0] * cx + H[1][1] * cy + H[1][2] * 1.0;
    Hz = H[2][0] * cx + H[2][1] * cy + H[2][2] * 1.0;

    Hx = Hx / Hz;
    Hy = Hy / Hz;

    Tcl_Obj* projectorPoint_v[] = {
      Tcl_NewDoubleObj(Hx),
      Tcl_NewDoubleObj(Hy),
    };

    Tcl_Obj* projectorPoint = Tcl_NewListObj(2, projectorPoint_v);
    return projectorPoint;
}

$cc compile

proc ::projectorToCamera {projectorPoint} {
    lassign [::math::linearalgebra::matmul $::Hinv [list [lindex $projectorPoint 0] [lindex $projectorPoint 1] 1]] Hinvx Hinvy Hinvz
    set Hinvx [expr {$Hinvx / $Hinvz}]
    set Hinvy [expr {$Hinvy / $Hinvz}]
    return [list $Hinvx $Hinvy]
}

When (non-capturing) tag /tag/ has center /c/ size /size/ {
     Claim tag $tag is a tag
}

When (non-capturing) tag /tag/ is a tag {
     puts "Added tag $tag"

    set tempPath "$::env(HOME)/folk-printed-programs/$tag.folk.temp"

    if {[file exists $tempPath]} {
      set path [open "$::env(HOME)/folk-printed-programs/$tag.folk.temp" r]
    } else {
      set path [open "$::env(HOME)/folk-printed-programs/$tag.folk" r]
    }
     set code [read $path]
     close $path

     # Wish $tag is outlined green
     Claim $tag has program code $code
}

set ::positionBeliefs [dict create]
set ::existenceBeliefs [dict create]

set ::cornerBeliefUpdateRate 0.16

When (non-capturing) $::thisNode has step count /c/ {
  dict for {tag value} $::existenceBeliefs {
    if {$value != 0} { 
      Claim tag $tag is a tag
      Claim tag $tag has corners [dict get $::positionBeliefs $tag]
      dict incr ::existenceBeliefs $tag -1
    }
  }
}

When (non-capturing) tag /tag/ has corners /corners/ at time /t/ {
    dict set ::existenceBeliefs $tag 4

    if {![dict exists $::positionBeliefs $tag]} {
      dict set ::positionBeliefs $tag $corners
    } else { 
      set previousCornerBeliefs [dict get $::positionBeliefs $tag]
      set newCornerBeliefs [list]

      foreach {i corner} [lenumerate $corners] { 
        set previousCornerBelief [lindex $previousCornerBeliefs $i]
        lappend newCornerBeliefs [add \
          [scale [expr {1 - $::cornerBeliefUpdateRate}] $previousCornerBelief] \
          [scale $::cornerBeliefUpdateRate $corner] \
        ]
      }

      dict set ::positionBeliefs $tag $newCornerBeliefs
    }

    set corners [dict get $::positionBeliefs $tag]
    # Claim tag $tag has corners $corners
  }

  When (non-capturing) tag /tag/ has corners /corners/ {

    set tagCorners [lmap p $corners {::cameraToProjector $p}]
    # foreach tagCorner $tagCorners { Display::text fb {*}$tagCorner 1 $tagCorner }
    # Display::fillQuad {*}$tagCorners white

    set vecBottom [sub [lindex $tagCorners 1] [lindex $tagCorners 0]]
    set vecRight [sub [lindex $tagCorners 2] [lindex $tagCorners 1]]

    set offsets {{-4.7 -2.6} {1 -2.6} {1 0.8} {-4.7 0.8}}
    set scales [matmul $offsets [list $vecBottom $vecRight]]
    set corners [add $tagCorners $scales]

    set edges [list]
    for {set i 0} {$i < [llength $corners]} {incr i} {
        if {$i > 0} { lappend edges [list [expr {$i - 1}] $i] }
    }
    lappend edges [list [expr {[llength $corners] - 1}] 0]

    set angle [expr {atan2(-[lindex $vecBottom 1], [lindex $vecBottom 0])}]
    set region [list $corners $edges $angle]

    Claim $tag has region $region
}
