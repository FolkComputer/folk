namespace eval escpos {
    namespace export *
    namespace ensemble create

    proc printProgram {printer id code} {
        if {[file exists "$::env(HOME)/folk-printed-programs/$id.folk"]} {
            error "Program $id already exists on disk. Aborting print."
        }
        writeFolkFile $id $code
        writeGeomFile $printer $id

        set matches [Statements::findMatches [list /someone/ claims $printer is at /address/]]
        set matchDict [lindex $matches 0]
        if {![dict exists $matchDict address]} { return }
        set address [dict get $matchDict address]

        set printerSocket [socket $address 9100]

        fconfigure $printerSocket -translation binary -buffering none
        set template {
            [init]
            [tag $id]
            [feed 1]
            $id ([clock format [clock seconds] -timezone :America/Denver -format "%a, %d %b %Y, %r"])
            [feed 2]
            $code
            [feed 3]
            [cut]
        }
        puts -nonewline $printerSocket [render $template]
        close $printerSocket
    }

    proc render {template} {
        set trimmed [lmap line [split $template "\n"] { string trim $line }]
        set singleLine [join $trimmed ""]
        return [uplevel [list subst $singleLine]]
    }

    proc writeFolkFile {id code} {
        set folkFile [open "$::env(HOME)/folk-printed-programs/$id.folk" w]
        puts $folkFile $code
        close $folkFile
    }

    proc writeGeomFile {printer id} {
        set matches [Statements::findMatches [list /someone/ claims $printer has tag geometry /geometry/]]
        set matchDict [lindex $matches 0]
        if {![dict exists $matchDict geometry]} { return }
        set geometry [dict get $matchDict geometry]
        set metaFile [open "$::env(HOME)/folk-printed-programs/$id.meta.folk" w]
        puts $metaFile [subst {Claim tag \$this has geometry {$geometry}}]
        close $metaFile
    }

    proc cut {} {
        return "\x1dV\x0"
    }

    proc feed n {
        return [format "\x1b\x64%c" $n]
    }

    proc init {} {
        return "\x1b\x40"
    }

    proc raw number {
        return [format "%c" $number]
    }

    proc scaledAprilTag {id scale} {
        set tagImage [::tagImageForId $id]
        set tagBits [list]
        for {set y 0} {$y < 10} {incr y} {
            for {set i 0 } {$i < $scale} {incr i} {
                for {set x 0} {$x < 10} {incr x} {
                    set j [expr {$y * [image_t bytesPerRow $tagImage] + $x}]
                    set bit [!= [image_t data $tagImage $j] 255]
                    lappend tagBits {*}[lrepeat $scale $bit]
                }
            }
        }
        return $tagBits
    }

    # scale must be divisible by 4 so width will be divisible by 8
    proc tag {id {scale 12}} {
        set tagImage [::tagImageForId $id]
        set tagBits [scaledAprilTag $id $scale]

        set width [expr {10 * $scale}]
        set xL [expr {$width / 8}]   ;# width in bytes (low byte)
        set yL [expr {$width % 256}] ;# height in lines (low byte)
        set yH [expr {$width / 256}] ;# height in lines (high byte)

        return "\x1dv0\x03[raw $xL]\x00[raw $yL][raw $yH][binary format B* [join $tagBits ""]]"
    }
}
