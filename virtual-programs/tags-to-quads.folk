set cc [C]

# Represents camera or projector intrinsics, including the classic
# intrinsic matrix but also dimensions at which the matrix was created
# + distortion coefficients.
#
# Intrinsic matrix:
#   fx  s   cx
#   0   fy  cy
#   0   0    1
$cc struct Intrinsics {
    double width;
    double height;

    double fx;
    double fy;
    double cx;
    double cy;
    double s;

    double k1;
    double k2;
}

# Intrinsics helpers:
$cc proc distort {double fx double fy double cx double cy
                  double k1 double k2
                  double xy[2] double out[2]} void {
    double x = (xy[0] - cx)/fx;
    double y = (xy[1] - cy)/fy;
    double r2 = x*x + y*y;
    double D = k1 * r2 + k2 * r2*r2;
    out[0] = (x * (1.0 + D))*fx + cx;
    out[1] = (y * (1.0 + D))*fy + cy;
}
$cc proc project {Intrinsics intr double width double height
                  double[3] v} Jim_Obj* {
    double out[3] = {
        v[0]*intr.fx +  v[1]*intr.s + v[2]*intr.cx,
                   0 + v[1]*intr.fy + v[2]*intr.cy,
                   0 +            0 + v[2]
    };
    out[0] /= out[2]; out[1] /= out[2];
    distort(intr.fx, intr.fy, intr.cx, intr.cy,
            intr.k1, intr.k2,
            out, out);
    out[0] *= width / intr.width;
    out[1] *= height / intr.height;
    Jim_Obj* retObjs[2] = {
        Jim_NewDoubleObj(interp, out[0]),
        Jim_NewDoubleObj(interp, out[1])
    };
    return Jim_NewListObj(interp, retObjs, 2);
}
$cc proc rescaleAndUndistort {Intrinsics intr
                              double cameraWidth double cameraHeight
                              double* in
                              double* out} void {
    double x = in[0] * intr.width / cameraWidth;
    double y = in[1] * intr.height / cameraHeight;

    x = (x - intr.cx) / intr.fx;
    y = (y - intr.cy) / intr.fy;
    for (int i = 0; i < 3; i++) {
        double r2 = x*x + y*y;
        double rad = 1.0 + intr.k1 * r2 + intr.k2 * r2*r2;
        x /= rad; y /= rad;
    }
    out[0] = x*intr.fx + intr.cx;
    out[1] = y*intr.fy + intr.cy;
}
$cc cflags -I./vendor/apriltag
$cc endcflags ./vendor/apriltag/libapriltag.so

$cc include <apriltag_pose.h>
$cc include <math.h>
$cc include <common/matd.h>
$cc include <common/homography.h>

$cc code {
#define MATD_VAR(name, nr, nc) matd_t* name = alloca(sizeof(matd_t) + ((nr)*(nc)*sizeof(double))); name->nrows = nr; name->ncols = nc;
}
$cc proc pseudoInverse {matd_t* a} matd_t* {
    matd_svd_t usv = matd_svd(a);

    MATD_VAR(Sinv, usv.S->ncols, usv.S->nrows);
    memset(Sinv->data, 0, sizeof(double)*Sinv->nrows*Sinv->ncols);
    for (unsigned int i = 0; i < usv.S->nrows; i++) {
        if (i >= usv.S->ncols) { break; }
        double el = MATD_EL(usv.S, i, i);
        if (el > MATD_EPS) {
            MATD_EL(Sinv, i, i) = 1.0 / el;
        }
    }

    matd_t* pinv = matd_op("M*M*(M')", usv.V, Sinv, usv.U);
    matd_destroy(usv.V); matd_destroy(usv.S); matd_destroy(usv.U);
    return pinv;
}

$cc code { 
void rotationVectorToRotationMatrix(double r[3], double out[3][3]) {
    double theta = sqrt(r[0]*r[0] + r[1]*r[1] + r[2]*r[2]);
    if (fabs(theta) < 0.0001) {
        double ret[3][3] = {
            {1, 0, 0},
            {0, 1, 0},
            {0, 0, 1}
        };
        memcpy(out, ret, sizeof(ret));
        return;
    }
    double u[3] = {r[0]/theta, r[1]/theta, r[2]/theta};
    double ret[3][3] = {
        {cos(theta) + u[0]*u[0]*(1 - cos(theta)),
         u[0]*u[1]*(1 - cos(theta)) - u[2]*sin(theta),
         u[0]*u[2]*(1 - cos(theta)) + u[1]*sin(theta)},
        {u[0]*u[1]*(1 - cos(theta)) + u[2]*sin(theta),
         cos(theta) + u[1]*u[1]*(1 - cos(theta)),
         u[1]*u[2]*(1 - cos(theta)) - u[0]*sin(theta)},
        {u[0]*u[2]*(1 - cos(theta)) - u[1]*sin(theta),
         u[1]*u[2]*(1 - cos(theta)) + u[0]*sin(theta),
         cos(theta) + u[2]*u[2]*(1 - cos(theta))}
    };
    memcpy(out, ret, sizeof(ret));
} }

# Based on: https://visp-doc.inria.fr/doxygen/camera_localization/tutorial-pose-gauss-newton-opencv.html

# Outputs to dt and dR (which should have been allocated by the caller).
$cc proc exponentialMap {matd_t* v matd_t* dt matd_t* dR} void {
    double vx = MATD_EL(v, 0, 0);
    double vy = MATD_EL(v, 1, 0);
    double vz = MATD_EL(v, 2, 0);
    double vtux = MATD_EL(v, 3, 0);
    double vtuy = MATD_EL(v, 4, 0);
    double vtuz = MATD_EL(v, 5, 0);
    MATD_VAR(tu, 3, 1); // theta u
    MATD_EL(tu, 0, 0) = vtux;
    MATD_EL(tu, 1, 0) = vtuy;
    MATD_EL(tu, 2, 0) = vtuz;
    // Rodrigues from tu to dR
    rotationVectorToRotationMatrix(tu->data, (double (*)[3]) dR->data);

    double theta = sqrt(matd_vec_dot_product(tu, tu));
    double sinc = (fabs(theta) < 1.0e-8) ? 1.0 : sin(theta) / theta;
    double mcosc = (fabs(theta) < 2.5e-4) ? 0.5 : (1.-cos(theta)) / theta / theta;
    double msinc = (fabs(theta) < 2.5e-4) ? (1./6.) : (1.-sin(theta)/theta) / theta / theta;

    MATD_EL(dt, 0, 0) = vx*(sinc + vtux*vtux*msinc)
        + vy*(vtux*vtuy*msinc - vtuz*mcosc)
        + vz*(vtux*vtuz*msinc + vtuy*mcosc);
    MATD_EL(dt, 1, 0) = vx*(vtux*vtuy*msinc + vtuz*mcosc)
        + vy*(sinc + vtuy*vtuy*msinc)
        + vz*(vtuy*vtuz*msinc - vtux*mcosc);
    MATD_EL(dt, 2, 0) = vx*(vtux*vtuz*msinc - vtuy*mcosc)
        + vy*(vtuy*vtuz*msinc + vtux*mcosc)
        + vz*(sinc + vtuz*vtuz*msinc);
}

# wX is the model 3D coordinates (for all 4 tag corners). x is the 4
# current detected tag corners in the image, in normalized
# coordinates. cRw and ctw are pose estimates that get refined (and
# replaced; they may be destroyed by us). The caller has the
# responsibility to free the returned cRw and ctw.
$cc proc poseGaussNewton {double[][3] wX double[][2] x int npoints
                          matd_t** cRw matd_t** ctw} void {
    MATD_VAR(J, npoints*2, 6);
    double lambda = 0.25;
    MATD_VAR(xq, npoints*2, 1);
    MATD_VAR(xn, npoints*2, 1);

    double residual = 0; double residual_prev;

    for (int i = 0; i < npoints; i++) {
        MATD_EL(xn, i*2, 0) = x[i][0];
        MATD_EL(xn, i*2+1, 0) = x[i][1];
    }

    MATD_VAR(wXi, 3, 1);
    int iters = 0;
    do {
        for (int i = 0; i < npoints; i++) {
            matd_set_data(wXi, wX[i]);
            matd_t* cX = matd_op("(M*M)+M", *cRw, wXi, *ctw);
            double Xi = MATD_EL(cX, 0, 0);
            double Yi = MATD_EL(cX, 1, 0);
            double Zi = MATD_EL(cX, 2, 0);
            matd_destroy(cX);

            double xi = Xi/Zi;
            double yi = Yi/Zi;

            // Update x(q)
            MATD_EL(xq, i*2, 0) = xi;   // x(q) = cX/cZ
            MATD_EL(xq, i*2+1, 0) = yi; // y(q) = cY/cZ

            // Update J using equation (11)
            MATD_EL(J, i*2, 0) = -1 / Zi;
            MATD_EL(J, i*2, 1) = 0;
            MATD_EL(J, i*2, 2) = xi / Zi;
            MATD_EL(J, i*2, 3) = xi * yi;
            MATD_EL(J, i*2, 4) = -(1 + xi * xi);
            MATD_EL(J, i*2, 5) = yi;

            MATD_EL(J, i*2+1, 0) = 0;
            MATD_EL(J, i*2+1, 1) = -1 / Zi;
            MATD_EL(J, i*2+1, 2) = yi / Zi;
            MATD_EL(J, i*2+1, 3) = 1 + yi * yi;
            MATD_EL(J, i*2+1, 4) = -xi * yi;
            MATD_EL(J, i*2+1, 5) = -xi;
        }

        matd_t* e_q = matd_op("M-M", xq, xn); // Equation (7)

        matd_t* Jp = pseudoInverse(J);
        matd_scale_inplace(Jp, -lambda);
        matd_t* dq = matd_multiply(Jp, e_q);
        MATD_VAR(dctw, 3, 1); MATD_VAR(dcRw, 3, 3);
        exponentialMap(dq, dctw, dcRw);

        matd_t* old_cRw = *cRw; matd_t* old_ctw = *ctw;
        *cRw = matd_op("(M')*M", dcRw, *cRw);
        *ctw = matd_op("(M')*(M-M)", dcRw, *ctw, dctw);
        matd_destroy(old_cRw); matd_destroy(old_ctw);

        residual_prev = residual;
        residual = matd_vec_dot_product(e_q, e_q);

        matd_destroy(e_q);
        matd_destroy(Jp);
        matd_destroy(dq);

        if (iters++ > 50) {
            fprintf(stderr, "tags-to-quads: TOO MANY ITERS\n");
            break;
        }
    } while (fabs(residual - residual_prev) > MATD_EPS);

    /* exit(1); */
}

# TagPose represents a rotation and translation from tag-space (where
# (0, 0, 0) is the center of the tag) to camera-space (where (0, 0, 0)
# is the center of the camera lens).
$cc struct TagPose {
    double R[3][3];
    double t[3][1];
}

$cc proc servoingEstimateTagPose {Intrinsics cameraIntrinsics
                                  double cameraWidth double cameraHeight
                                  double tagSize TagPose prevTagPose
                                  double[4][2] p0} TagPose {
    double r = tagSize / 2.0;
    double wX[][3] = {
        {-r,  r, 0}, { r,  r, 0},
        { r, -r, 0}, {-r, -r, 0}
    };

    double x[4][2];
    for (int i = 0; i < 4; i++) {
        // Change p0 so we can apply intrinsics:
        rescaleAndUndistort(cameraIntrinsics, cameraWidth, cameraHeight,
                            p0[i], x[i]);
        // Apply intrinsics to go from pixel coordinates to normalized
        // image-plane coordinates:
        x[i][0] = (x[i][0] - cameraIntrinsics.cx) / cameraIntrinsics.fx;
        x[i][1] = (x[i][1] - cameraIntrinsics.cy) / cameraIntrinsics.fy;
    }

    matd_t* cRw = matd_create_data(3, 3, (double*) prevTagPose.R);
    matd_t* ctw = matd_create_data(3, 1, (double*) prevTagPose.t);

    poseGaussNewton(wX, x, 4, &cRw, &ctw);

    TagPose ret;
    memcpy(ret.R, cRw->data, sizeof(ret.R));
    memcpy(ret.t, ctw->data, sizeof(ret.t));

    matd_destroy(cRw);
    matd_destroy(ctw);
    return ret;
}

$cc proc baseEstimateTagPose {Intrinsics cameraIntrinsics
                              double cameraWidth double cameraHeight
                              double tagSize
                              double[4][2] p0} TagPose {
    // We'll fill this in with a new .p and .H with
    // undistorted/rescaled coordinates.
    apriltag_detection_t det;

    // We'll fill in the right side of each correspondence in the
    // loop.
    float correspondences[4][4] = {
        {-1.0f, 1.0f, 0, 0},
        {1.0f, 1.0f, 0, 0},
        {1.0f, -1.0f, 0, 0},
        {-1.0f, -1.0f, 0, 0}
    };
    for (int i = 0; i < 4; i++) {
        rescaleAndUndistort(cameraIntrinsics, cameraWidth, cameraHeight,
                            p0[i], det.p[i]);
        correspondences[i][2] = det.p[i][0];
        correspondences[i][3] = det.p[i][1];
    }

    zarray_t correspondencesArr = {
        .el_sz = sizeof(float[4]), .size = 4, .alloc = 4,
        .data = (char*) correspondences
    };
    det.H = homography_compute(&correspondencesArr,
                               HOMOGRAPHY_COMPUTE_FLAG_SVD);
    apriltag_detection_info_t info = {
        .det = &det,
        .tagsize = tagSize,
        .fx = cameraIntrinsics.fx, .fy = cameraIntrinsics.fy,
        .cx = cameraIntrinsics.cx, .cy = cameraIntrinsics.cy
    };
    apriltag_pose_t pose;
    estimate_pose_for_tag_homography(&info, &pose);

    matd_destroy(det.H);

    TagPose ret;
    memcpy(ret.R, pose.R->data, sizeof(ret.R));
    memcpy(ret.t, pose.t->data, sizeof(ret.t));

    matd_destroy(pose.R);
    matd_destroy(pose.t);
    return ret;
}

$cc proc poseDistSq { TagPose p1 TagPose p2 } double {
    double delta_x = p2.t[0][0] - p1.t[0][0];
    double delta_y = p2.t[1][0] - p1.t[1][0];
    double delta_z = p2.t[2][0] - p1.t[2][0];

    return delta_x * delta_x + delta_y * delta_y + delta_z * delta_z;
}

set poseLib [$cc compile]
Claim the pose library is $poseLib

# All spaces are in meters. To transform a point from one space to another, it will execute
# a partially evaluated function located in `changers` (all implementations currently just
# translate and rotate)
set spaceLib [library create {
    package require linalg
    namespace import \
        ::math::linearalgebra::add \
        ::math::linearalgebra::matmul

    proc changeableTo {targetSpace changer} {
        list changeableTo $targetSpace $changer
    }
    proc change {sourceSpace targetSpace v} {
        # puts "change ($sourceSpace) -> ($targetSpace) ($v)"
        if {$sourceSpace eq $targetSpace} {
            return $v
        }
        if {[lindex $sourceSpace 0] eq "changeableTo"} {
            set changedSpace [lindex $sourceSpace 1]
            set changer [lindex $sourceSpace 2]
            set v [{*}$changer $v]
            return [change $changedSpace $targetSpace $v]
        }

        ForEach! /someone/ claims the changer from space $sourceSpace to space $targetSpace is /changer/ {
            set ret [{*}$changer $v]
        }
        if {![info exists ret]} {
            error "spaceLib change: Don't know how to change $sourceSpace to $targetSpace"
        }
        return $ret
    }
}]
When camera /camera/ to display /display/ has extrinsics /extrinsics/ {
    Claim the changer from space $camera to space "display $display" is \
        [list apply [list {R t v} {
            add [matmul $R $v] $t
        } $spaceLib] \
             [dict get $extrinsics R] \
             [dict get $extrinsics t]]
}
set quadLib [library create quadLib {spaceLib} {
    package require linalg
    namespace import \
        ::math::linearalgebra::add \
        ::math::linearalgebra::matmul \
        ::math::linearalgebra::sub \
        ::math::linearalgebra::norm

    proc create {space vertices} { list $space $vertices }
    proc space {q} { lindex $q 0 }
    proc vertices {q} { lindex $q 1 }

    proc change {q targetSpace} {
        variable spaceLib
        set sourceSpace [space $q]
        create $targetSpace [lmap v [vertices $q] {
            $spaceLib change $sourceSpace $targetSpace $v
        }]
    }
    proc scale {q s} {
        # TODO: this should probably be with respect to the centroid
        # of the quad?
        create [space $q] [lmap v [vertices $q] {
            lmap x $v {* $x $s}
        }]
    }
    proc buffer {q args} {
        # TODO: this should probably be with respect to the centroid
        # of the quad?
        lassign [vertices $q] topLeft topRight bottomRight bottomLeft
        foreach {direction distance} $args {
            if {![regexp {([\-0-9\.]+)(cm|mm|m)?} $distance -> distance unit]} {
                error "quad buffer: Invalid distance $distance"
            }

            if {$distance == 0} { continue }

            if {$unit eq "mm"} {
                set distance [* $distance 0.001]
                set unit "m"
            }
            if {$unit eq "cm"} {
                set distance [* $distance 0.01]
                set unit "m"
            }
            if {$unit ne "" && $unit ne "m"} {
                error "quad buffer: Invalid unit $unit"
            }

            if {$direction eq "top"} {
                set disp [list 0 [- $distance] 0]
                set topLeft [add $topLeft $disp]
                set topRight [add $topRight $disp]
            } elseif {$direction eq "bottom"} {
                set disp [list 0 $distance 0]
                set bottomLeft [add $bottomLeft $disp]
                set bottomRight [add $bottomRight $disp]
            } elseif {$direction eq "left"} {
                set disp [list [- $distance] 0 0]
                set bottomLeft [add $bottomLeft $disp]
                set topLeft [add $topLeft $disp]
            } elseif {$direction eq "right"} {
                set disp [list $distance 0 0]
                set bottomRight [add $bottomRight $disp]
                set topRight [add $topRight $disp]
            } else {
                error "quad buffer: Invalid direction $direction"
            }
        }
        return [create [space $q] [list $topLeft $topRight $bottomRight $bottomLeft]]
    }

    # Moves the quad left/right/up/down along the x and y axes of
    # the plane of the quad (not the global x and y).
    proc move {q args} {
        lassign [vertices $q] topLeft topRight bottomRight bottomLeft
        set width [::math::max [norm [sub $topRight $topLeft]] \
                       [norm [sub $bottomRight $bottomLeft]]]
        set height [::math::max [norm [sub $bottomRight $topRight]] \
                        [norm [sub $bottomLeft $topLeft]]]
        foreach {direction distance} $args {
            if {![regexp {^([\-0-9\.]+)(cm|mm|m|%)?$} $distance -> distance unit]} {
                error "quad move: Invalid distance $distance"
            }

            if {$distance == 0} { continue }

            if {$unit eq "%"} {
                if {$direction eq "up" || $direction eq "down"} {
                    set distance [* $height $distance 0.01]
                } else {
                    set distance [* $width $distance 0.01]
                }
                set unit "m"
            }
            if {$unit eq "mm"} {
                set distance [* $distance 0.001]
                set unit "m"
            }
            if {$unit eq "cm"} {
                set distance [* $distance 0.01]
                set unit "m"
            }
            if {$unit ne "" && $unit ne "m"} {
                error "quad move: Invalid unit $unit"
            }

            if {$direction eq "up"} {
                set disp [list 0 [- $distance] 0]
            } elseif {$direction eq "down"} {
                set disp [list 0 $distance 0]
            } elseif {$direction eq "left"} {
                set disp [list [- $distance] 0 0]
            } elseif {$direction eq "right"} {
                set disp [list $distance 0 0]
            } else {
                error "quad move: Invalid direction $direction"
            }

            set topLeft [add $topLeft $disp]
            set topRight [add $topRight $disp]
            set bottomRight [add $bottomRight $disp]
            set bottomLeft [add $bottomLeft $disp]
        }
        return [create [space $q] [list $topLeft $topRight $bottomRight $bottomLeft]]
    }

    # TODO: we need to either return 'space-tagged points' for these
    # or just change them into some default space like camera space.
    proc left {q} {
        lassign [vertices $q] topLeft topRight bottomRight bottomLeft
        return [::math::linearalgebra::scale 0.5 [add $bottomLeft $topLeft]]
    }
    proc right {q} {
        lassign [vertices $q] topLeft topRight bottomRight bottomLeft
        return [::math::linearalgebra::scale 0.5 [add $bottomRight $topRight]]
    }
}]
Claim the quad library is $quadLib

When camera /camera/ has width /cameraWidth/ height /cameraHeight/ &\
     camera /camera/ has intrinsics /cameraIntrinsics/ {

    # for position stabilization
    set unfreezeThreshold 0.01
    set unfreezeThresholdSq [expr {$unfreezeThreshold * $unfreezeThreshold}]
    set unfreezeLength 0.3 ;# in seconds

    When tag /tag/ has detection /det/ on camera $camera at timestamp /timestamp/ &\
         /tag/ has resolved geometry /geom/ {

        set tagSize [dict get $geom tagSize]

        set prevResults [Query! tag $tag has pose /tagPose/ at timestamp /timestamp/]
        if {[llength $prevResults] > 0} {
            set latestResult [lindex [lsort -command {apply {{a b} {
                expr { [dict get $b timestamp] < [dict get $a timestamp] }
            }}} $prevResults] 0]

            set prevTimestamp [dict get $latestResult timestamp]
            # Consider previous tag pose if it's less than 200ms old:
            if {$timestamp - $prevTimestamp < 0.2} {
                set prevTagPose [dict get $latestResult tagPose]
            }
        }
        if {![info exists prevTagPose]} {
            set prevTagPose [$poseLib baseEstimateTagPose $cameraIntrinsics \
                                 $cameraWidth $cameraHeight \
                                 $tagSize [dict get $det p]]
        }

        set tagPose [$poseLib servoingEstimateTagPose $cameraIntrinsics \
                         $cameraWidth $cameraHeight \
                         $tagSize $prevTagPose \
                         [dict get $det p]]

        ## tag stabilization ##
        # (can't use When here as it can't exfiltrate info). Is there a better way to do this?
        set stabilizedMatches [Query! /someone/ wishes tag $tag is stabilized]
        set isTagStabilized [expr {[llength $stabilizedMatches] > 0}]

        if {$isTagStabilized} {
            set stateResults [Query! tag $tag is stabilized with state /state/]
            if {[llength $stateResults] > 0} {
                set state [dict get [lindex $stateResults 0] state]
                dict with state {
                    set distSq [$poseLib poseDistSq $frozenPose $tagPose]

                    if {$distSq > $unfreezeThresholdSq} {
                        set frozenPose $tagPose
                        # reset timestamp even if it's already unfrozen to keep it unfrozen
                        set unfreezeTime $timestamp
                        set frozen 0
                    } elseif {!$frozen && $timestamp - $unfreezeTime > $unfreezeLength} {
                        set frozenPose $tagPose
                        set frozen 1
                    }

                    if {$frozen} {
                        set tagPose $frozenPose
                    }
                }
            } else {
                # first time, so we'll init some stuff
                # (starts unfrozen)
                set state [dict create frozen 0 frozenPose $tagPose \
                               unfreezeTime $timestamp]
            }

            HoldStatement! [list tag $tag stabilization] \
                [list $this claims tag $tag is stabilized with state $state]
        }

        # Note that (for now) this pose statement is only imperatively
        # queried (by future invocations of this same code), not
        # reacted to. No need to give it a keep time.
        HoldStatement! [list tag pose $tag] \
            [list $this claims tag $tag has pose $tagPose at timestamp $timestamp]

        # this creates a partially evaluated function that converts tag space (in meters) to its position
        # and rotation in camera space (also in meters) using the pose info we previously calculated
        set tagToCameraSpaceChanger [list apply [list {tagPose v} {
            set R [dict get $tagPose R]; set t [dict get $tagPose t]
            add [matmul $R $v] $t
        } $spaceLib] $tagPose]
        set tagSpace [$spaceLib changeableTo $camera $tagToCameraSpaceChanger]

        set r [expr {$tagSize / 2}]
        # Vertex order needs to be clockwise to align with
        # Vulkan. Top-left to bottom-left.
        set vertices \
            [list [list [- $r] [- $r] 0] \
                 [list     $r  [- $r] 0] \
                 [list     $r     $r  0] \
                 [list  [- $r]    $r  0]]
        set quad [$quadLib create $tagSpace $vertices]
        Claim tag $tag has quad $quad
    }
}


When /tag/ has resolved geometry /geom/ &\
     tag /tag/ has quad /q/ {

    set pageQuad [$quadLib buffer $q \
                      top [dict getdef $geom top 0] \
                      right [dict getdef $geom right 0] \
                      left [dict getdef $geom left 0] \
                      bottom [dict getdef $geom bottom 0]]
    Claim $tag has quad $pageQuad
}

When the GPU writable image library is /gpuWritableLib/ &\
     display /disp/ has width /displayWidth/ height /displayHeight/ &\
     display /disp/ has intrinsics /displayIntrinsics/ &\
     /tag/ has writable image /writableImageId/ &\
     the GPU creates writable image /writableImageId/ as /wi/ &\
     /tag/ has quad /quad/ {

    # Composite each quad's writable image onto the screen based on
    # its quad.
    set displayToClip [list \
        [list [expr {2.0/$displayWidth}] 0 -1] \
        [list 0 [expr {2.0/$displayHeight}] -1] \
        [list 0 0 1]]

    lassign [lmap v [$quadLib vertices [$quadLib change $quad "display $disp"]] {
        $poseLib project $displayIntrinsics \
                     $displayWidth $displayHeight $v
    }] a b c d

    set wim [$gpuWritableLib gpuImage $wi]

    Wish the GPU draws pipeline "image" with arguments \
        [list [list $displayWidth $displayHeight] \
             $displayToClip \
             $wim $a $b $c $d]
}
