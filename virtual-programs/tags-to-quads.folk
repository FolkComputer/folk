set cc [c create]

# Represents camera or projector intrinsics, including the classic
# intrinsic matrix but also dimensions at which the matrix was created
# + distortion coefficients.
#
# Intrinsic matrix:
#   fx  s   cx
#   0   fy  cy
#   0   0    1
$cc struct Intrinsics {
    double width;
    double height;

    double fx;
    double fy;
    double cx;
    double cy;
    double s;

    double k1;
    double k2;
}

namespace eval intrinsics {
    set cc [uplevel {set cc}]
    $cc proc distort {double fx double fy double cx double cy
                      double k1 double k2
                      double xy[2] double out[2]} void {
        double x = (xy[0] - cx)/fx;
        double y = (xy[1] - cy)/fy;
        double r2 = x*x + y*y;
        double D = k1 * r2 + k2 * r2*r2;
        out[0] = (x * (1.0 + D))*fx + cx;
        out[1] = (y * (1.0 + D))*fy + cy;
    }
    $cc proc project {Intrinsics intr double[3] v} Tcl_Obj* {
        double out[3] = {
            v[0]*intr.fx +  v[1]*intr.s + v[2]*intr.cx,
                       0 + v[1]*intr.fy + v[2]*intr.cy,
                       0 +            0 + v[2]
        };
        out[0] /= out[2]; out[1] /= out[2];
        distort(intr.fx, intr.fy, intr.cx, intr.cy,
                intr.k1, intr.k2,
                out, out);
        Tcl_Obj* retObjs[2] = { Tcl_NewDoubleObj(out[0]), Tcl_NewDoubleObj(out[1]) };
        return Tcl_NewListObj(2, retObjs);
    }
    namespace export *
    namespace ensemble create
}

$cc proc rescaleAndUndistort {Intrinsics intr
                              double cameraWidth double cameraHeight
                              double* in
                              double* out} void {
    double x = in[0] * intr.width / cameraWidth;
    double y = in[1] * intr.height / cameraHeight;

    x = (x - intr.cx) / intr.fx;
    y = (y - intr.cy) / intr.fy;
    for (int i = 0; i < 3; i++) {
        double r2 = x*x + y*y;
        double rad = 1.0 + intr.k1 * r2 + intr.k2 * r2*r2;
        x /= rad; y /= rad;
    }
    out[0] = x*intr.fx + intr.cx;
    out[1] = y*intr.fy + intr.cy;
}
$cc cflags -I$::env(HOME)/apriltag $::env(HOME)/apriltag/libapriltag.a
$cc include <apriltag_pose.h>
$cc include <math.h>
$cc include <common/matd.h>
$cc include <common/homography.h>

$cc code {
#define MATD_VAR(name, nr, nc) matd_t* name = alloca(sizeof(matd_t) + (nr*nc*sizeof(double))); name->nrows = nr; name->ncols = nc;
}
$cc proc pseudoInverse {matd_t* a} matd_t* {
    matd_svd_t usv = matd_svd(a);

    MATD_VAR(Sinv, usv.S->ncols, usv.S->nrows);
    memset(Sinv->data, 0, sizeof(double)*Sinv->nrows*Sinv->ncols);
    for (unsigned int i = 0; i < usv.S->nrows; i++) {
        if (i >= usv.S->ncols) { break; }
        double el = MATD_EL(usv.S, i, i);
        if (el > MATD_EPS) {
            MATD_EL(Sinv, i, i) = 1.0 / el;
        }
    }

    matd_t* pinv = matd_op("M*M*(M')", usv.V, Sinv, usv.U);
    matd_destroy(usv.V); matd_destroy(usv.S); matd_destroy(usv.U);
    return pinv;
}

$cc code { 
void rotationVectorToRotationMatrix(double r[3], double out[3][3]) {
    double theta = sqrt(r[0]*r[0] + r[1]*r[1] + r[2]*r[2]);
    if (fabs(theta) < 0.0001) {
        double ret[3][3] = {
            {1, 0, 0},
            {0, 1, 0},
            {0, 0, 1}
        };
        memcpy(out, ret, sizeof(ret));
        return;
    }
    double u[3] = {r[0]/theta, r[1]/theta, r[2]/theta};
    double ret[3][3] = {
        {cos(theta) + u[0]*u[0]*(1 - cos(theta)),
         u[0]*u[1]*(1 - cos(theta)) - u[2]*sin(theta),
         u[0]*u[2]*(1 - cos(theta)) + u[1]*sin(theta)},
        {u[0]*u[1]*(1 - cos(theta)) + u[2]*sin(theta),
         cos(theta) + u[1]*u[1]*(1 - cos(theta)),
         u[1]*u[2]*(1 - cos(theta)) - u[0]*sin(theta)},
        {u[0]*u[2]*(1 - cos(theta)) - u[1]*sin(theta),
         u[1]*u[2]*(1 - cos(theta)) + u[0]*sin(theta),
         cos(theta) + u[2]*u[2]*(1 - cos(theta))}
    };
    memcpy(out, ret, sizeof(ret));
} }

# Based on: https://visp-doc.inria.fr/doxygen/camera_localization/tutorial-pose-gauss-newton-opencv.html

# Outputs to dt and dR (which should have been allocated by the caller).
$cc proc exponentialMap {matd_t* v matd_t* dt matd_t* dR} void {
    double vx = MATD_EL(v, 0, 0);
    double vy = MATD_EL(v, 1, 0);
    double vz = MATD_EL(v, 2, 0);
    double vtux = MATD_EL(v, 3, 0);
    double vtuy = MATD_EL(v, 4, 0);
    double vtuz = MATD_EL(v, 5, 0);
    MATD_VAR(tu, 3, 1); // theta u
    MATD_EL(tu, 0, 0) = vtux;
    MATD_EL(tu, 1, 0) = vtuy;
    MATD_EL(tu, 2, 0) = vtuz;
    // Rodrigues from tu to dR
    rotationVectorToRotationMatrix(tu->data, (double (*)[3]) dR->data);

    double theta = sqrt(matd_vec_dot_product(tu, tu));
    double sinc = (fabs(theta) < 1.0e-8) ? 1.0 : sin(theta) / theta;
    double mcosc = (fabs(theta) < 2.5e-4) ? 0.5 : (1.-cos(theta)) / theta / theta;
    double msinc = (fabs(theta) < 2.5e-4) ? (1./6.) : (1.-sin(theta)/theta) / theta / theta;

    MATD_EL(dt, 0, 0) = vx*(sinc + vtux*vtux*msinc)
        + vy*(vtux*vtuy*msinc - vtuz*mcosc)
        + vz*(vtux*vtuz*msinc + vtuy*mcosc);
    MATD_EL(dt, 1, 0) = vx*(vtux*vtuy*msinc + vtuz*mcosc)
        + vy*(sinc + vtuy*vtuy*msinc)
        + vz*(vtuy*vtuz*msinc - vtux*mcosc);
    MATD_EL(dt, 2, 0) = vx*(vtux*vtuz*msinc - vtuy*mcosc)
        + vy*(vtuy*vtuz*msinc + vtux*mcosc)
        + vz*(sinc + vtuz*vtuz*msinc);
}

# wX is the model 3D coordinates (for all 4 tag corners). x is the 4
# current detected tag corners in the image, in normalized
# coordinates. cRw and ctw are pose estimates that get refined (and
# replaced; they may be destroyed by us). The caller has the
# responsibility to free the returned cRw and ctw.
$cc proc poseGaussNewton {double[][3] wX double[][2] x int npoints
                          matd_t** cRw matd_t** ctw} void {
    MATD_VAR(J, npoints*2, 6);
    double lambda = 0.25;
    MATD_VAR(xq, npoints*2, 1);
    MATD_VAR(xn, npoints*2, 1);

    double residual = 0; double residual_prev;

    for (int i = 0; i < npoints; i++) {
        MATD_EL(xn, i*2, 0) = x[i][0];
        MATD_EL(xn, i*2+1, 0) = x[i][1];
    }

    MATD_VAR(wXi, 3, 1);
    int iters = 0;
    do {
        for (int i = 0; i < npoints; i++) {
            matd_set_data(wXi, wX[i]);
            matd_t* cX = matd_op("(M*M)+M", *cRw, wXi, *ctw);
            double Xi = MATD_EL(cX, 0, 0);
            double Yi = MATD_EL(cX, 1, 0);
            double Zi = MATD_EL(cX, 2, 0);
            matd_destroy(cX);

            double xi = Xi/Zi;
            double yi = Yi/Zi;

            // Update x(q)
            MATD_EL(xq, i*2, 0) = xi;   // x(q) = cX/cZ
            MATD_EL(xq, i*2+1, 0) = yi; // y(q) = cY/cZ

            // Update J using equation (11)
            MATD_EL(J, i*2, 0) = -1 / Zi;
            MATD_EL(J, i*2, 1) = 0;
            MATD_EL(J, i*2, 2) = xi / Zi;
            MATD_EL(J, i*2, 3) = xi * yi;
            MATD_EL(J, i*2, 4) = -(1 + xi * xi);
            MATD_EL(J, i*2, 5) = yi;

            MATD_EL(J, i*2+1, 0) = 0;
            MATD_EL(J, i*2+1, 1) = -1 / Zi;
            MATD_EL(J, i*2+1, 2) = yi / Zi;
            MATD_EL(J, i*2+1, 3) = 1 + yi * yi;
            MATD_EL(J, i*2+1, 4) = -xi * yi;
            MATD_EL(J, i*2+1, 5) = -xi;
        }

        matd_t* e_q = matd_op("M-M", xq, xn); // Equation (7)

        matd_t* Jp = pseudoInverse(J);
        matd_scale_inplace(Jp, -lambda);
        matd_t* dq = matd_multiply(Jp, e_q);
        MATD_VAR(dctw, 3, 1); MATD_VAR(dcRw, 3, 3);
        exponentialMap(dq, dctw, dcRw);

        matd_t* old_cRw = *cRw; matd_t* old_ctw = *ctw;
        *cRw = matd_op("(M')*M", dcRw, *cRw);
        *ctw = matd_op("(M')*(M-M)", dcRw, *ctw, dctw);
        matd_destroy(old_cRw); matd_destroy(old_ctw);

        residual_prev = residual;
        residual = matd_vec_dot_product(e_q, e_q);

        matd_destroy(e_q);
        matd_destroy(Jp);
        matd_destroy(dq);

        if (iters++ > 10) { /* ok */ }
    } while (fabs(residual - residual_prev) > MATD_EPS);

    /* exit(1); */
}

$cc struct TagPose {
    double R[3][3];
    double t[3][1];
}

$cc proc servoingEstimateTagPose {Intrinsics cameraIntrinsics
                                  double cameraWidth double cameraHeight
                                  double tagSize TagPose prevTagPose
                                  double[4][2] p0} TagPose {
    double r = tagSize / 2.0;
    double wX[][3] = {
        {-r,  r, 0}, { r,  r, 0},
        { r, -r, 0}, {-r, -r, 0}
    };

    double x[4][2];
    for (int i = 0; i < 4; i++) {
        // Change p0 so we can apply intrinsics:
        rescaleAndUndistort(cameraIntrinsics, cameraWidth, cameraHeight,
                            p0[i], x[i]);
        // Apply intrinsics to go from pixel coordinates to normalized
        // image-plane coordinates:
        x[i][0] = (x[i][0] - cameraIntrinsics.cx) / cameraIntrinsics.fx;
        x[i][1] = (x[i][1] - cameraIntrinsics.cy) / cameraIntrinsics.fy;
    }

    matd_t* cRw = matd_create_data(3, 3, (double*) prevTagPose.R);
    matd_t* ctw = matd_create_data(3, 1, (double*) prevTagPose.t);

    poseGaussNewton(wX, x, 4, &cRw, &ctw);

    TagPose ret;
    memcpy(ret.R, cRw->data, sizeof(ret.R));
    memcpy(ret.t, ctw->data, sizeof(ret.t));

    matd_destroy(cRw);
    matd_destroy(ctw);
    return ret;
}

$cc proc baseEstimateTagPose {Intrinsics cameraIntrinsics
                              double cameraWidth double cameraHeight
                              double tagSize
                              double[4][2] p0} TagPose {
    // We'll fill this in with a new .p and .H with
    // undistorted/rescaled coordinates.
    apriltag_detection_t det;

    // We'll fill in the right side of each correspondence in the
    // loop.
    float correspondences[4][4] = {
        {-1.0f, 1.0f, 0, 0},
        {1.0f, 1.0f, 0, 0},
        {1.0f, -1.0f, 0, 0},
        {-1.0f, -1.0f, 0, 0}
    };
    for (int i = 0; i < 4; i++) {
        rescaleAndUndistort(cameraIntrinsics, cameraWidth, cameraHeight,
                            p0[i], det.p[i]);
        correspondences[i][2] = det.p[i][0];
        correspondences[i][3] = det.p[i][1];
    }

    zarray_t correspondencesArr = {
        .el_sz = sizeof(float[4]), .size = 4, .alloc = 4,
        .data = (char*) correspondences
    };
    det.H = homography_compute(&correspondencesArr,
                               HOMOGRAPHY_COMPUTE_FLAG_SVD);
    apriltag_detection_info_t info = {
        .det = &det,
        .tagsize = tagSize,
        .fx = cameraIntrinsics.fx, .fy = cameraIntrinsics.fy,
        .cx = cameraIntrinsics.cx, .cy = cameraIntrinsics.cy
    };
    apriltag_pose_t pose;
    estimate_pose_for_tag_homography(&info, &pose);

    matd_destroy(det.H);

    TagPose ret;
    memcpy(ret.R, pose.R->data, sizeof(ret.R));
    memcpy(ret.t, pose.t->data, sizeof(ret.t));

    matd_destroy(pose.R);
    matd_destroy(pose.t);
    return ret;
}

namespace eval ::space {
    set changers [dict create]

    proc changeableTo {targetSpace changer} {
        list changeableTo $targetSpace $changer
    }
    proc change {sourceSpace targetSpace v} {
        # puts "change $sourceSpace -> $targetSpace ($v)"
        variable changers
        if {$sourceSpace eq $targetSpace} {
            return $v
        }
        if {[lindex $sourceSpace 0] eq "changeableTo"} {
            set changedSpace [lindex $sourceSpace 1]
            set changer [lindex $sourceSpace 2]
            set v [{*}$changer $v]
            return [change $changedSpace $targetSpace $v]
        }
        if {[dict exists $changers $sourceSpace $targetSpace]} {
            set changer [dict get $changers $sourceSpace $targetSpace]
            return [{*}$changer $v]
        }
        error "space change: Don't know how to change $sourceSpace to $targetSpace"
    }
    namespace export *
    namespace ensemble create
}
When camera /camera/ to display /display/ has extrinsics /extrinsics/ {
    # HACK: doesn't use db
    dict set space::changers $camera "display $display" [list apply {{R t v} {
        add [matmul $R $v] $t
    }} [dict get $extrinsics R] [dict get $extrinsics t]]
}
namespace eval ::quad {
    proc create {space vertices} { list $space $vertices }
    proc space {q} { lindex $q 0 }
    proc vertices {q} { lindex $q 1 }

    proc change {q targetSpace} {
        set sourceSpace [space $q]
        create $targetSpace [lmap v [vertices $q] {
            ::space change $sourceSpace $targetSpace $v
        }]
    }
    proc scale {q s} {
        create [space $q] [lmap v [vertices $q] {
            lmap x $v {* $x $s}
        }]
    }
    proc buffer {q args} {
        lassign [vertices $q] bottomLeft bottomRight topRight topLeft
        foreach {direction distance} $args {
            if {![regexp {([0-9\.]+)(mm|m)?} $distance -> distance unit]} {
                error "quad buffer: Invalid distance $distance"
            }

            if {$unit eq "mm"} {
                set distance [* $distance 0.001]
                set unit "m"
            }
            if {$unit eq "cm"} {
                set distance [* $distance 0.01]
                set unit "m"
            }
            if {$unit ne "m"} { error "quad buffer: Invalid unit $unit" }

            if {$direction eq "top"} {
                set disp [list 0 [- $distance] 0]
                set topLeft [add $topLeft $disp]
                set topRight [add $topRight $disp]
            } elseif {$direction eq "bottom"} {
                set disp [list 0 $distance 0]
                set bottomLeft [add $bottomLeft $disp]
                set bottomRight [add $bottomRight $disp]
            } elseif {$direction eq "left"} {
                set disp [list [- $distance] 0 0]
                set bottomLeft [add $bottomLeft $disp]
                set topLeft [add $topLeft $disp]
            } elseif {$direction eq "right"} {
                set disp [list $distance 0 0]
                set bottomRight [add $bottomRight $disp]
                set topRight [add $topRight $disp]
            } else {
                error "quad buffer: Invalid direction $direction"
            }
        }
        return [create [space $q] [list $bottomLeft $bottomRight $topRight $topLeft]]
    }
    proc left {q} {
        lassign [vertices $q] bottomLeft bottomRight topRight topLeft
        return [::math::linearalgebra::scale 0.5 [add $bottomLeft $topLeft]]
    }
    proc right {q} {
        lassign [vertices $q] bottomLeft bottomRight topRight topLeft
        return [::math::linearalgebra::scale 0.5 [add $bottomRight $topRight]]
    }

    namespace export *
    namespace ensemble create
}

$cc compile

When camera /camera/ has width /cameraWidth/ height /cameraHeight/ &\
     camera /camera/ has intrinsics /cameraIntrinsics/ {
        
    set ::prevTagPoses [dict create]
    When tag /tag/ has detection /det/ on $camera at /timestamp/ {
        # Setting aside this tag space (48600 to 48713) for calibration.
        if {$tag >= 48600} { return }

        set tagSize [expr {31.5 / 1000}]; # 31.5 mm

        if {[dict exists $::prevTagPoses $tag]} {
            set prevTimestamp [dict get $::prevTagPoses $tag timestamp]
            # Consider previous tag pose if it's less than 200ms old:
            if {$timestamp - $prevTimestamp < 0.2} {
                set prevTagPose [dict get $::prevTagPoses $tag pose]
            }
        }
        if {![info exists prevTagPose]} {
            set prevTagPose [baseEstimateTagPose $cameraIntrinsics \
                                 $cameraWidth $cameraHeight \
                                 $tagSize [dict get $det p]]
        }

        set tagPose [servoingEstimateTagPose $cameraIntrinsics \
                         $cameraWidth $cameraHeight \
                         $tagSize $prevTagPose \
                         [dict get $det p]]

        dict set ::prevTagPoses $tag timestamp $timestamp
        dict set ::prevTagPoses $tag pose $tagPose

        set tagToCameraSpaceChanger [list apply {{tagPose v} {
            set R [dict get $tagPose R]; set t [dict get $tagPose t]
            add [matmul $R $v] $t
        }} $tagPose]
        set tagSpace [space changeableTo $camera $tagToCameraSpaceChanger]

        set r [expr {$tagSize / 2}]
        # Vertex order is bottom-left, bottom-right, top-right,
        # top-left.
        set vertices \
            [list [list [- $r]    $r  0] \
                 [list     $r     $r  0] \
                 [list     $r  [- $r] 0] \
                 [list  [- $r] [- $r] 0]]

        set quad [quad create $tagSpace $vertices]
        Claim tag $tag has quad $quad
    }
}

When tag /tag/ has quad /q/ {
    # TODO: Store construction of program $tag so it can vary by
    # program, instead of hard-coding.
    set pageQuad [quad buffer $q \
                      top 28mm \
                      right 28mm \
                      left 157mm \
                      bottom 80mm]
    Claim $tag has quad $pageQuad

    Claim tag $tag is a tag
    Claim tag $tag has a program

    # HACK:

    # Claim $tag has quad $q
    # Just uses the outer edge of the tag:
    # Claim $tag has quad [quad scale $q [expr {10.0 / 6.0}]]
}

# TODO: Remove this backward compatibility with 2D programs:
# HACK: For backward compatibility:
When display /proj/ has intrinsics /projectorIntrinsics/ &\
     tag /tag/ is a tag & /tag/ has quad /q/ {
    set vertices [lmap v [quad vertices [quad change $q "display $proj"]] {
        intrinsics project $projectorIntrinsics $v
    }]

    set edges [list]
    for {set i 0} {$i < [llength $vertices]} {incr i} {
        if {$i > 0} { lappend edges [list [expr {$i - 1}] $i] }
    }
    lappend edges [list [expr {[llength $vertices] - 1}] 0]

    set vecBottom [sub [lindex $vertices 1] [lindex $vertices 0]]
    set angle [expr {atan2(-[lindex $vecBottom 1], [lindex $vecBottom 0])}]

    Claim $tag has region [region create $vertices $edges $angle]
}
