set getCc {{} {
    if {[info exists ::threadsCc]} { return $::threadsCc }

    set cc [C]
    $cc cflags -I.
    $cc include "workqueue.h"
    $cc code {
        #define NTHREADS 5
        extern pid_t threadsTid[NTHREADS];
        extern WorkQueueItem threadsCurrentItem[NTHREADS];
        extern Db* db;
    }
    $cc proc threadCurrentItem {int tid} char* {
        static char buf[1000];
        for (int i = 0; i < NTHREADS; i++) {
            if (threadsTid[i] != tid) { continue; }

            WorkQueueItem item = threadsCurrentItem[i];
            if (item.op == ASSERT) {
                snprintf(buf, sizeof(buf), "Assert");
            } else if (item.op == RETRACT) {
                snprintf(buf, sizeof(buf), "Retract");
            } else if (item.op == HOLD) {
                snprintf(buf, sizeof(buf), "Hold");
            } else if (item.op == SAY) {
                snprintf(buf, sizeof(buf), "Say");
            } else if (item.op == RUN) {
                Statement* stmt = statementAcquire(db, item.run.stmt);
                if (stmt != NULL) {
                    snprintf(buf, sizeof(buf), "Run when (%.100s) (%.100s)",
                             clauseToString(item.run.whenPattern),
                             clauseToString(statementClause(stmt)));
                    statementRelease(db, stmt);
                }
            } else if (item.op == REMOVE_PARENT) {
                snprintf(buf, sizeof(buf), "Remove Parent");
            } else {
                snprintf(buf, sizeof(buf), "???");
            }
            return buf;
        }
        return "nope";
    }
    $cc compile
    return $cc
}}

Wish the web server handles route "/threads" with handler [list apply {{getCc} {
    set cc [apply $getCc]

    # TODO: query Linux or us for all running threads
    set pid [pid]
    set tids [glob -tails -directory /proc/$pid/task *]
    html [subst {
        <html>
        <head>
        <link rel="stylesheet" href="/style.css">
        <title>Threads</title>
        </head>

        <body>

        <h2>Threads</h2>

        <ol>
        [join [lmap tid $tids {
            set taskdir /proc/$pid/task/$tid
            set statusFd [open $taskdir/status r]
            set status [read $statusFd]; close $statusFd
            subst {<li>
                $taskdir:
                  [regexp -inline {State:[^\n]*\n} $status]
                [htmlEscape [$cc threadCurrentItem $tid]]
            </li>}
        }] "\n"]
        </ol>

        </body>
        </html>
    }]
}} $getCc]
