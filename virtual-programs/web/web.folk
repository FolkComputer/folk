puts "web: [__threadId] (PID [pid])"

# HACK
signal block SIGPIPE

source "lib/ws.tcl"
# We export wsLib so that other threads can emit messages onto
# websockets.
Claim the websocket library is $wsLib

proc handleConnect {chan addr} {
    $chan timeout 2000
    fileevent $chan readable [list handleRead $chan $addr]
}

proc htmlEscape {s} { string map {& "&amp;" < "&lt;" > "&gt;" "\"" "&quot;"} $s }

proc readFile {filename contentTypeVar} {
    upvar $contentTypeVar contentType
    set fd [open $filename r]
    fconfigure $fd -translation binary
    set response [read $fd]; close $fd; return $response
}

proc handlePage {path httpStatusVar contentTypeVar} {
    upvar $contentTypeVar contentType
    switch -exact -- $path {
        "/favicon.ico" {
            set contentType "image/x-icon"
            readFile "assets/favicon.ico" contentType
        }
        "/style.css" {
            set contentType "text/css"
            readFile "assets/style.css" contentType
        }
        "/statementClauseToId.pdf" {
            getDotAsPdf [trie dot [Statements::statementClauseToIdTrie]] contentType
        }
        "/statements.pdf" {
            getDotAsPdf [Statements::dot] contentType
        }
        "/lib/folk.js" {
            set contentType "text/javascript"
            readFile "lib/folk.js" contentType
        }
        default {
            upvar $httpStatusVar httpStatus
            set httpStatus "HTTP/1.1 404 Not Found"
            subst {
                <html>
                <b>$path</b> Not found.
                </html>
            }
        }
    }
}

proc handleRead {chan addr} {
    $chan buffering none

    gets $chan line; set line [string range $line 0 end-1]
    set firstline $line

    # puts "Http ([clock format [clock seconds] -format "%H:%M:%S"]): $chan $addr: $line"
    set headers [list]
    while true {
        gets $chan line; set line [string range $line 0 end-1]
        if {$line eq ""} { break }

        # puts "  Http: ($line)"
        if {[regexp {^([^\s:]+)\s*:\s*(.+)} $line -> k v]} {
            lappend headers $k $v
        } else {
            # puts stderr "Http: Weird line: $line"
            break
        }
    }

    if {[regexp {GET ([^ ]*) HTTP/1.1} $firstline -> path] && $path ne "/ws"} {
        set response {}
        try {
            ForEach! /someone/ wishes the web server handles route /route/ with handler /handler/ {
                if {[regexp ^$route$ $path whole_match]} {
                    set ^html [proc html {body} {dict create statusAndHeaders "HTTP/1.1 200 OK\nConnection: close\nContent-Type: text/html; charset=utf-8\n\n" body $body}]
                    set ^json [proc json {body} {dict create statusAndHeaders "HTTP/1.1 200 OK\nConnection: close\nContent-Type: application/json; charset=utf-8\n\n" body $body}]
                    set response [apply [list {path} $handler] $path]
                }
            }
            if {$response eq ""} {
                set httpStatus "HTTP/1.1 200 OK"
                set contentType "text/html; charset=utf-8"
                set body [handlePage $path httpStatus contentType]
                set response [dict create statusAndHeaders "$httpStatus\nConnection: close\nContent-Type: $contentType\n\n" body $body]
            }
            if {![dict exists $response statusAndHeaders]} {
                error "Response not generated"
            }
        } on error e {
            set contentType "text-html; charset=utf-8"
            set body [subst {
                <html>
                <head>
                <title>folk: 500 Internal Server Error</title>
                </head>
                <body>
                <pre>[htmlEscape $e]:
[htmlEscape [errorInfo $e [info stacktrace]]]</pre>
                </body>
                </html>
            }]
            set response [dict create statusAndHeaders "HTTP/1.1 500 Internal Server Error\nConnection: close\nContent-Type: $contentType\n\n" body $body]
        }
        puts -nonewline $chan [dict get $response statusAndHeaders]
        if {[dict exists $response body]} {
            puts -nonewline $chan [dict get $response body]
        }
        close $chan

    } elseif {[regexp {POST ([^ ]*) HTTP/1.1} $firstline -> path]} {
        set httpStatus "HTTP/1.1 200 OK"
        set contentType "text/plain; charset=utf-8"
        puts -nonewline $chan "$httpStatus\r\nConnection: close\r\nContent-Type: $contentType\r\n\r\n"

        set body [$chan read [dict get $headers Content-Length]]
        # puts "  ($body)"
        try {
            puts -nonewline $chan [eval $body]
        } on error e {
            puts "Error: $e"
            puts -nonewline $chan "Error: $e"
        }
        close $chan

    } elseif {[info exists path] && $path eq "/ws"} {
        puts "web: Request for /ws ($headers)"
        WsConnection upgrade $chan [dict get $headers Sec-WebSocket-Key]
        Assert! websocket $chan is connected
        # TODO: Retract! on disconnect

    } else { puts "Closing: $chan $addr $headers"; close $chan }
}

while true {
    try {
        set f [socket stream.server 4273]
        $f readable [lambda {} {f} {
            set client [$f accept addr]
            handleConnect $client $addr
        }]
        break
    } on error e {
        # Handles failure to bind to :4273. We try again in a second.
        puts stderr "web: $e"
        sleep 1
    }
}
vwait forever
