When when /rect/ points /direction/ with length /l/ at /someone/ /lambda/ with environment /e/ {
  if {[string match "/*" $rect]} { return }
  Wish $rect points $direction with length $l
}

When when /rect/ points /direction/ at /someone/ /lambda/ with environment /e/ {
  if {[string match "/*" $rect]} { return }
  Wish $rect points $direction with length 1
}

When the quad library is /quadLib/ &\
     the pose library is /poseLib/ &\
     display /disp/ has width /displayWidth/ height /displayHeight/ &\
     display /disp/ has intrinsics /displayIntrinsics/ &\
     /someone/ wishes /rect/ points /direction/ with length /l/ &\
     /rect/ has quad /quad/ {

    set scale $l

    if {$direction eq "up"} {
        set whiskerQuad [$quadLib scale $quad width 0.01px height $scale]
        set whiskerQuad [$quadLib move $whiskerQuad up 100%]
        set color blue
    } elseif {$direction eq "left"} {
        set whiskerQuad [$quadLib scale $quad height 0.01px width $scale]
        set whiskerQuad [$quadLib move $whiskerQuad left 100%]
        set color gold
    } elseif {$direction eq "right"} {
        set whiskerQuad [$quadLib scale $quad height 0.01px width $scale]
        set whiskerQuad [$quadLib move $whiskerQuad right 100%]
        set color green
    } elseif {$direction eq "down"} {
        set whiskerQuad [$quadLib scale $quad width 0.01px height $scale]
        set whiskerQuad [$quadLib move $whiskerQuad down 100%]
        set color white
    } else {
        error "points-at: Invalid direction $direction"
    }

    # HACK: This implementation is sort of inelegant in that it
    # happens entirely in screen-space, because we need to draw right
    # to the screen right now, and we don't have a surface-to-clip for
    # that.

    # Downproject the whisker to screen-space.
    lassign [lmap v [$quadLib vertices [$quadLib change $whiskerQuad "display $disp"]] {
        $poseLib project $displayIntrinsics \
            $displayWidth $displayHeight $v
    }] a b c d

    set from $c
    set to $b
    Wish to draw a line onto $disp with \
        points [list $from $to] width 4 \
        color $color
    Wish to draw a circle onto $disp with \
        center $to radius 10 thickness 5 \
        color $color filled false

    When /target/ has quad /q2/ {
        if {$target eq $rect} { return }

        set displayVertices [lmap v [$quadLib vertices [$quadLib change $q2 "display $disp"]] {
            $poseLib project $displayIntrinsics \
                $displayWidth $displayHeight $v
        }]

        if {[::math::geometry::pointInsidePolygon $to $displayVertices]} {
            Claim (keep 20ms) $rect points $direction at $target
            Claim (keep 20ms) $rect points $direction with length $l at $target
        }
    }
}
