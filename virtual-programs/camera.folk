if {$::isLaptop} return

if {$::thisNode eq "folk-interact"} {
    namespace eval ::Camera {
        variable WIDTH 1920
        variable HEIGHT 1080
    }
} else {
    namespace eval ::Camera {
        variable WIDTH 1280
        variable HEIGHT 720
    }
}
set width $::Camera::WIDTH
set height $::Camera::HEIGHT

On process {
    source pi/Camera.tcl

    set camera [Camera::cameraOpen "/dev/video0" $width $height]
    Camera::cameraInit $camera
    Camera::cameraStart $camera
    # skip 5 frames for booting a cam
    for {set i 0} {$i < 5} {incr i} {
        Camera::cameraFrame $camera
    }

    puts "Camera tid: [getTid] booted at [clock milliseconds]"

    fn grayFrame {} {
        if {![Camera::cameraFrame $camera]} {
            error "Failed to capture from camera"
        }
        set image [Camera::newImage $width $height 1]
        Camera::cameraDecompressGray $camera $image
        return $image
    }

    set ::oldFrames [list]
    When $::thisProcess has step count /c/ {
        set frame [grayFrame]
        Commit {
            Claim the camera time is $::stepTime
            Claim the camera frame is $frame at [clock milliseconds]
        }
        lappend ::oldFrames $frame
        if {[llength $::oldFrames] >= 10} {
            set ::oldFrames [lassign $::oldFrames oldestFrame]
            Camera::freeImage $oldestFrame
        }
    }
}

set ::cameraTime none
When the camera time is /cameraTime/ {
    set ::cameraTime $cameraTime
}
# For backward compatibility.
When the camera frame is /grayFrame/ at /timestamp/ {
    Claim the camera frame is $grayFrame
}
