set ROWS 4
set COLS 5
# The model is a dictionary whose keys are tag IDs and whose values
# are model points (x, y). The points on the outer perimeter will get
# projected to PostScript points and printed; the points in the
# interior will get projected to Vulkan points and rendered on
# projector.
set MODEL [apply {{ROWS COLS} {
    set MODEL [dict create]

    set tagSideLength 1.0
    set tagOuterLength [expr {$tagSideLength * 10/6}]
    set pad $tagSideLength
    for {set row 0} {$row < $ROWS} {incr row} {
        for {set col 0} {$col < $COLS} {incr col} {
            set id [expr {48600 + $row*$COLS + $col}]
            set modelX [expr {($tagOuterLength + $pad)*$col}]
            set modelY [expr {($tagOuterLength + $pad)*$row}]
            dict set MODEL $id [list $modelX $modelY]
        }
    }
    return $MODEL
}} $ROWS $COLS]

fn isPrintedTag {id} {
    # We print tags on the outer perimeter of the grid, and we project
    # tags in the interior.
    set idx [- $id 48600]
    set row [expr {$idx / $COLS}]
    set col [expr {$idx % $COLS}]
    return [expr {$row == 0 || $row == $ROWS - 1 ||
                  $col == 0 || $col == $COLS - 1}]
}
fn isProjectedTag {id} { ! [isPrintedTag $id] }

# Takes a list of at least 4 point pairs (model -> image) like
#
# [list \
#   [list x0 y0 u0 v0]] \
#   [list x1 y1 u1 v1] \
#   [list x2 y2 u2 v2] \
#   [list x3 y3 u3 v3]]
#
# Returns a 3x3 homography that maps model (x, y) to image (u, v)
# (using homogeneous coordinates).
fn estimateHomography {pointPairs} {
    set A [list]
    set b [list]
    foreach pair $pointPairs {
        lassign $pair x y u v
        lappend A [list $x $y 1 0  0  0 [expr {-$x*$u}] [expr {-$y*$u}]]
        lappend A [list 0  0  0 $x $y 1 [expr {-$x*$v}] [expr {-$y*$v}]]
        lappend b $u $v
    }

    lassign [leastSquaresSVD $A $b] a0 a1 a2 b0 b1 b2 c0 c1
    set H [subst {
        {$a0 $a1 $a2}
        {$b0 $b1 $b2}
        {$c0 $c1 1}
    }]
    return $H
}
fn applyHomography {H xy} {
    lassign [matmul $H [list {*}$xy 1]] u v w
    return [list [/ $u $w] [/ $v $w]]
}

Wish the web server handles route "/calibrate$" with handler [list apply {{MODEL ^isPrintedTag ^estimateHomography ^applyHomography} {
    set calibrationBoardPs [apply {{MODEL ^isPrintedTag ^estimateHomography ^applyHomography} {
        set marginTop 72; set marginLeft 36
        set PageWidth 612; set PageHeight 792

        set tagSideLength 50
        set tagOuterLength [expr {$tagSideLength * 10/6}]
        set pad $tagSideLength

        set H_modelToPs [estimateHomography [subst {
            {1 1 $tagSideLength $tagSideLength}
            {1 0 $tagSideLength 0}
            {0 1 0 $tagSideLength}
            {0 0 0 0}
        }]]

        subst {
            %!PS
            << /PageSize \[$PageWidth $PageHeight\] >> setpagedevice

            % (0, 0) is bottom-left of portrait page right now.
            90 rotate 1 -1 scale
            % Now (0, 0) is top-left of landscape page.

            gsave
            $marginLeft [- $marginTop 18] translate
            1 -1 scale
            0 setgray /Helvetica findfont 12 scalefont setfont
            newpath 0 0 moveto (Folk calibration board) show
            grestore

            $marginLeft $marginTop translate

            [join [dict values [dict map {id modelPoint} $MODEL {
                if {![isPrintedTag $id]} { continue }

                lassign [applyHomography $H_modelToPs $modelPoint] psX psY
                subst {
                    gsave
                    $psX [+ $psY $tagOuterLength] translate
                    $tagOuterLength -$tagOuterLength scale
                    [::tagPsForId $id]
                    grestore
                }
            }]] "\n"]
        }
    }} $MODEL ${^isPrintedTag} ${^estimateHomography} ${^applyHomography}]
    set fp [open [list |ps2pdf - - <<$calibrationBoardPs] rb]
    set calibrationBoardPdf [read $fp]; close $fp

    upvar ^html ^html
    html [csubst {
      <html>
      <head><title>Folk: Calibrate</title></head>
      <body>

      <iframe width="500px" height="300px" src="data:application/pdf;base64,$[binary encode base64 $calibrationBoardPdf]">
      </iframe>

      <p>
        Print the above board, then measure the inner side length (6 blocks) of a tag in millimeters,
        <br>enter it here, and click Begin Calibration:
      <input id="tag-side-length-mm" type="text">mm <button id="tag-side-length-submit">Begin Calibration</button>
      </p>

      <script>
        function uuidv4() {
          return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
            (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
          );
        }
        const self = uuidv4();

        document.getElementById('tag-side-length-submit').addEventListener('click', (e) => {
          // Report the side length to a statement in Folk.

          const mm = document.getElementById("tag-side-length-mm").value;

          window.ws = new WebSocket(window.location.origin.replace("http", "ws") + "/ws");
          ws.onopen = () => {
            ws.send(`
              set ::checkerboardDetections [list]
              Retract \${self} claims the checkerboard tag side length is /anything/ mm
              Assert \${self} claims the checkerboard tag side length is \${mm} mm
           `);
          };
          window.onbeforeunload = () => {
            ws.send(`
              set ::checkerboardDetections [list]
              Retract \${self} claims the checkerboard tag side length is /anything/ mm
            `);
          }
        });
      </script>

      </body>
    </html>
  }]
}} $MODEL ${^isPrintedTag} ${^estimateHomography} ${^applyHomography}]

Wish the GPU compiles pipeline "apriltag" {
    {uvec4 tagBitsVec vec2 a vec2 b vec2 c vec2 d} {
        vec2 vertices[4] = vec2[4](a, b, d, c);
        return vertices[gl_VertexIndex];
    } {fn ::invBilinear} {
        vec2 p = gl_FragCoord.xy;
        vec2 uv = invBilinear(p, a, b, c, d);

        int x = int(uv.x * 10); int y = int(uv.y * 10);
        int bitIdx = y * 10 + x;
        uint bit = (tagBitsVec[bitIdx / 32] >> (bitIdx % 32)) & 0x1;
        return bit == 1 ? vec4(1, 1, 1, 1) : vec4(0, 0, 0, 1);
    }
}
When the display Display has width /displayWidth/ height /displayHeight/ &\
     the checkerboard tag side length is /sideLengthMm/ mm {
    # Project projected tags once the printed side length has been
    # dialed in.

    set tagSideLength 1.0
    set tagOuterLength [expr {$tagSideLength * 10/6}]
    set pad $tagSideLength

    # TODO: Use a general homography to warp this projection. Then
    # adjust the homography based on self-perception of the prev
    # iteration of projection.

    set tagSideLengthPixels [expr {int(min($displayWidth/($COLS), $displayHeight/($ROWS)))}]

    set ::H_modelToDisplay [estimateHomography [subst {
        {1 1 $tagSideLengthPixels $tagSideLengthPixels}
        {1 0 $tagSideLengthPixels 0}
        {0 1 0 $tagSideLengthPixels}
        {0 0 0 0}
    }]]

    set instances [list]
    dict for {id modelPoint} $MODEL {
        if {![isProjectedTag $id]} { continue }

        set tagImage [::tagImageForId $id]
        set tagBits [list]
        # 10x10 AprilTag -> 100 bits
        for {set y 0} {$y < 10} {incr y} {
            for {set x 0} {$x < 10} {incr x} {
                set j [expr {$y * [image_t bytesPerRow $tagImage] + $x}]
                set bit [== [image_t data $tagImage $j] 255]
                lappend tagBits $bit
            }
        }
        # -> 4 32-bit integers
        set tagBitsVec [list 0b[join [lreverse [lrange $tagBits 0 31]] ""] \
                            0b[join [lreverse [lrange $tagBits 32 63]] ""] \
                            0b[join [lreverse [lrange $tagBits 64 95]] ""] \
                            0b[join [lreverse [lrange $tagBits 96 127]] ""]]
        lassign $modelPoint x y
        lappend instances \
            [list $tagBitsVec \
                 [applyHomography $::H_modelToDisplay [list $x $y]]  \
                 [applyHomography $::H_modelToDisplay [list [+ $x $tagOuterLength] $y]] \
                 [applyHomography $::H_modelToDisplay [list [+ $x $tagOuterLength] [+ $y $tagOuterLength]]] \
                 [applyHomography $::H_modelToDisplay [list $x [+ $y $tagOuterLength]]]]
    }
    Wish to draw a quad with \
        p0 [list 0 0] p1 [list $displayWidth 0] \
        p2 [list $displayWidth $displayHeight] p3 [list 0 $displayHeight] \
        color white layer 99
    Wish the GPU draws pipeline "apriltag" with instances $instances layer 100

    # TODO: Look for valid detections and re-adjust.
    When /someone/ detects tags /tags/ at /timestamp/ in time /aprilTime/ {
        set detection [dict create] ;# dict keyed by tag id for easy lookup
        foreach tag $tags { dict set detection [dict get $tag id] $tag }

        # Can we find the bounds of the printed calibration board?
        for {set col 0} {$col < $COLS} {incr col} {
            set topId [expr {48600 + $col}]
            set bottomId [expr {48600 + ($ROWS-1)*$COLS + $col}]
            if {![info exists topEdge] && [isPrintedTag $topId] && [dict exists $detection $topId]} {
                set topTagCorners [dict get $detection $topId corners]
                set topEdge [list {*}[lindex $topTagCorners 2] {*}[lindex $topTagCorners 3]]
            }
            if {![info exists bottomEdge] && [isPrintedTag $bottomId] && [dict exists $detection $bottomId]} {
                set bottomTagCorners [dict get $detection $bottomId corners]
                set bottomEdge [list {*}[lindex $bottomTagCorners 0] {*}[lindex $bottomTagCorners 1]]
            }
        }
        for {set row 0} {$row < $ROWS} {incr row} {
            set leftId [expr {48600 + $row*$COLS}]
            set rightId [expr {48600 + $row*$COLS + $COLS-1}]
            if {![info exists leftEdge] && [isPrintedTag $leftId] && [dict exists $detection $leftId]} {
                set leftTagCorners [dict get $detection $leftId corners]
                set leftEdge [list {*}[lindex $leftTagCorners 0] {*}[lindex $leftTagCorners 3]]
            }
            if {![info exists rightEdge] && [isPrintedTag $rightId] && [dict exists $detection $rightId]} {
                set rightTagCorners [dict get $detection $rightId corners]
                set rightEdge [list {*}[lindex $rightTagCorners 2] {*}[lindex $rightTagCorners 1]]
            }
        }
        foreach edgeName {topEdge bottomEdge leftEdge rightEdge} {
            if {![info exists $edgeName]} { return }
        }
        set printedCalibrationBoard [list {*}[findLineIntersection $topEdge $leftEdge] \
                                         {*}[findLineIntersection $topEdge $rightEdge] \
                                         {*}[findLineIntersection $bottomEdge $rightEdge] \
                                         {*}[findLineIntersection $bottomEdge $leftEdge]]

        set projectedTags [list]
        for {set row 0} {$row < $ROWS} {incr row} {
            for {set col 0} {$col < $COLS} {incr col} {
                set id [expr {48600 + $row*$COLS + $col}]
                if {![isProjectedTag $id]} { continue }
                if {![dict exists $detection $id]} { continue }

                set projectedTag [dict get $detection $id]
                if {[pointInsidePolygon [dict get $projectedTag center] $printedCalibrationBoard]} {
                    # This is a projected tag that we detected.
                    lappend projectedTags $projectedTag
                }
            }
        }

        if {[llength $projectedTags] > 0} {
            puts "======\nHave board: {$printedCalibrationBoard}"
            puts "Saw projected tags: ($projectedTags)"

            # Is there at least one projected tag whose corners are within those of the printed tags?
            # Find a homography to the calibration plane.
            # Reproject with the new homography.

            # Set ::projH
            
        }
    }
}


package require math::linearalgebra
namespace import ::math::linearalgebra::*
package require math::geometry
namespace import ::math::geometry::findLineIntersection ::math::geometry::pointInsidePolygon

fn findHomography {sideLength detection} {
    # Camera points, from the camera image.
    fn detectionTagCorner {row col corner} {
        set id [expr {48600 + $row*$COLS + $col}]
        return [lindex [dict get [dict get $detection $id] corners] $corner]
    }
    set points [list]
    for {set row 0} {$row < $ROWS} {incr row} {
        for {set col 0} {$col < $COLS} {incr col} {
            lappend points [detectionTagCorner $row $col 0]
            lappend points [detectionTagCorner $row $col 1]
            lappend points [detectionTagCorner $row $col 2]
            lappend points [detectionTagCorner $row $col 3]
        }
    }

    # Model points, from the known geometry of the checkerboard (in
    # meters, where top-left corner of top-left AprilTag is 0, 0).
    set model [list]
    for {set row 0} {$row < $ROWS} {incr row} {
        for {set col 0} {$col < $COLS} {incr col} {
            lappend model [list [* $col $sideLength 2] \
                               [+ [* $row $sideLength 2] $sideLength]] ;# bottom-left

            lappend model [list [+ [* $col $sideLength 2] $sideLength] \
                               [+ [* $row $sideLength 2] $sideLength]] ;# bottom-right

            lappend model [list [+ [* $col $sideLength 2] $sideLength] \
                               [* $row $sideLength 2]] ;# top-right

            lappend model [list [* $col $sideLength 2] [* $row $sideLength 2]] ;# top-left
        }
    }

    set A [list]
    set b [list]
    foreach imagePoint $points modelPoint $model {
        lassign $imagePoint u v
        lassign $modelPoint x y
        lappend A [list $x $y 1 0  0  0 [expr {-$x*$u}] [expr {-$y*$u}]]
        lappend A [list 0  0  0 $x $y 1 [expr {-$x*$v}] [expr {-$y*$v}]]
        lappend b $u $v
    }

    lassign [leastSquaresSVD $A $b] a0 a1 a2 b0 b1 b2 c0 c1
    set H [subst {
        {$a0 $a1 $a2}
        {$b0 $b1 $b2}
        {$c0 $c1 1}
    }]

    return $H
}

fn processHomography {H} {
    fn h {i j} { getelem $H [- $j 1] [- $i 1] }

    fn v {i j} {
        list \
            [* [h $i 1] [h $j 1]] \
            [+ [* [h $i 1] [h $j 2]] [* [h $i 2] [h $j 1]]] \
            [* [h $i 2] [h $j 2]] \
            [+ [* [h $i 3] [h $j 1]] [* [h $i 1] [h $j 3]]] \
            [+ [* [h $i 3] [h $j 2]] [* [h $i 2] [h $j 3]]] \
            [* [h $i 3] [h $j 3]]
    }

    set V [list \
               [v 1 2] \
               [sub [v 1 1] [v 2 2]]]
    return $V
}

exec mkdir -p "$::env(HOME)/folk-calibrate-detections"
fn calibrate {sideLength detections} {
    # sideLength is inner side length of a tag, in meters.
    # detections is a list of N dictionaries of detected tags.

    set fd [open "$::env(HOME)/folk-calibrate-detections/$::thisNode-detections-[clock milliseconds].tcl" w]
    puts $fd [subst {
        set sideLength $sideLength
        set detections {$detections}
    }]
    close $fd

    # The below calibration technique is from Zhang
    # (https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/tr98-71.pdf):

    # Compute N homographies (one homography for each detection):
    set Hs [lmap detection $detections {
        findHomography $sideLength $detection
    }]

    # puts "Detections {$detections}"
    # puts "Hs {$Hs}"

    # Try to solve for the camera intrinsics:
    try {
        # Construct V:
        set Vtop [list]; set Vbottom [list]
        foreach H $Hs {
            lassign [processHomography $H] Vtop_ Vbottom_
            lappend Vtop $Vtop_
            lappend Vbottom $Vbottom_
        }
        set V [list {*}$Vtop {*}$Vbottom]
        assert {[::math::linearalgebra::shape $V] eq [list [* 2 [llength $Hs]] 6]}

        # Solve Vb = 0:
        lassign [determineSVD [matmul [transpose $V] $V]] U S V'
        set b [lindex [transpose ${V'}] [lindex [lsort -real -indices $S] 0]]

        # Compute camera intrinsic matrix A:
        lassign $b B11 B12 B22 B13 B23 B33
        set v0 [expr {($B12*$B13 - $B11*$B23) / ($B11*$B22 - $B12*$B12)}]
        set lambda [expr {$B33 - ($B13*$B13 + $v0*($B12*$B13 - $B11*$B23))/$B11}]
        set alpha [expr {sqrt($lambda/$B11)}]
        set beta [expr {sqrt($lambda*$B11/($B11*$B22 - $B12*$B12))}]
        set gamma [expr {-$B12*$alpha*$alpha*$beta/$lambda}]
        set u0 [expr {$gamma*$v0/$beta - $B13*$alpha*$alpha/$lambda}]
        foreach var {v0 lambda alpha beta gamma u0} {
            puts "$var = [set $var]"
        }

        puts "   Focal Length: \[ $alpha $beta ]"
        puts "Principal Point: \[ $u0 $v0 ]"
        puts "           Skew: \[ $gamma ] "

        # TODO: nlopt for better intrinsics + distortion parameters
    } on error e {
        puts stderr $::errorInfo
    }
}

# set ::checkerboardDetections [list]
# set ::checkerboardLastDetectionTimestamp 0
When the checkerboard tag side length is /sideLengthMm/ mm & \
     /someone/ detects tags /tags/ at /timestamp/ in time /aprilTime/ {

    # if {[llength $::checkerboardDetections] >= 4} { return }

    # set detection [dict create] ;# dict keyed by tag id for easy lookup
    # foreach tag $tags { dict set detection [dict get $tag id] $tag }

    # Does it contain all of the calibration tags?
    # if {($timestamp - $::checkerboardLastDetectionTimestamp > 2000) &&
    #     [isValidCheckerboardDetection $detection]} {
    #     puts "Capturing calibration checkerboard"
    #     lappend ::checkerboardDetections $detection
    #     set ::checkerboardLastDetectionTimestamp $timestamp
    # }

    # if {[llength $::checkerboardDetections] == 4} {
    #     puts "Detected 4 checkerboards. Calibrating."
    #     set sideLength [/ $sideLengthMm 1000.0] ;# in meters
    #     calibrate $sideLength $::checkerboardDetections
    # }
}
