# Function to check if the device is a keyboard
proc isKeyboard {device} {
    set properties [exec udevadm info --query=property --name=$device]
    if {$properties eq ""} {
        return false
    }
    set isKeyboard [string match *ID_INPUT_KEYBOARD=1* $properties]
    return $isKeyboard
    # TODO: Excluding mice would nice to keey the list of keyboard devices short
    #       Alas, including mice is necessary for the Logitech K400R keyboard
    # set isMouse [string match *ID_INPUT_MOUSE=1* $properties]
    # return [expr {$isKeyboard && !$isMouse}]
}

####
# /dev/input/event* addresses are the ground truth for keyboard devices
#
# This function goes through each of them and checks if they are keyboards
proc walkInputEventPaths {} {
    # set allDevices [glob -nocomplain "/dev/input/event*"]
    set allDevices [glob -nocomplain "/dev/input/by-path/*"]
    set keyboards [list]
    foreach device $allDevices {
        if {[isKeyboard $device]} {
            if {[file readable $device] == 0} {
                puts stderr "keyboard: Device $device is not readable. Attempting to change permissions."
                # Attempt to change permissions so that the file can be read
                exec chmod +r $device
            }
            lappend keyboards $device
        }
    }
    return $keyboards
}

set keyboardDevices [walkInputEventPaths]
foreach keyboard $keyboardDevices {
    Claim $keyboard is a keyboard device
}

# backwards compatibility
When /page/ is a keyboard with path /keyboard/ {
    Claim $page is a keyboard with path $keyboard locale us
}

When /keyboard/ is a keyboard device {
    source "lib/keymap.tcl"
    set defaultKeymap [keymap load us]

    set cc [C]
    $cc include <linux/input.h>
    $cc include <sys/ioctl.h>
    $cc include <stdio.h>
    $cc include <string.h>

    $cc proc setGrabDevice {Jim_Interp* interp Jim_Obj* channel bool grab} void {
        FILE* fp = Jim_AioFilehandle(interp, channel);
        if (fp == NULL) {
            printf("unable to open channel '%s' as file\n'", Jim_String(channel));
            return;
        }
        ioctl(fileno(fp), EVIOCGRAB, (void*)grab);
    }
    set grabber [$cc compile]

    set KEY_STATES [list up down repeat]

    set keyboardChannel [open $keyboard r]
    fconfigure $keyboardChannel -translation binary

    Hold! local-keymaps [list $this claims $keyboard has keymaps [dict create]]

    When /page/ is a keyboard with path $keyboard locale /locale/ {
        if {![exists -command keymap]} {
            source "lib/keymap.tcl"
        }
        set localKeymaps [dict getdef [lindex [Query! /someone/ claims $keyboard has keymaps /localKeymaps/] \
                                           0] localKeymaps {}]

        set map [keymap load $locale]
        dict set localKeymaps $map true
        Hold! local-keymaps [list $this claims $keyboard has keymaps $localKeymaps]

        $grabber setGrabDevice $keyboardChannel [dict size $localKeymaps]

        On unmatch {
            dict unset localKeymaps $map
            Hold! local-keymaps [list $this claims $keyboard has keymaps $localKeymaps]

            keymap destroy $map
            $grabber setGrabDevice $keyboardChannel [dict size $localKeymaps]
        }
    }

    set evtBytes 16
    set evtFormat iissi
    if {[exec getconf LONG_BIT] == 64} {
        set evtBytes 24
        set evtFormat wwssi
    }

    set modifiers $::keymap::modWeights
    foreach k [dict keys $modifiers] {
        dict set modifiers $k 0
    }
    while 1 {
        binary scan [read $keyboardChannel $evtBytes] $evtFormat \
            tvSec tvUsec type code value

        if {$type == 0x01} { ;# EV_KEY
            set localKeymaps [dict getdef [lindex [Query! /someone/ claims $keyboard has keymaps /localKeymaps/] \
                                               0] localKeymaps {}]

            lassign [dict keys $localKeymaps] activeKeymap
            if {$activeKeymap eq ""} {
                set activeKeymap $defaultKeymap
            }

            set mods [+ {*}[dict values $modifiers]]
            lassign [keymap resolve $activeKeymap $code $mods] key keychar
            if {$key eq ""} { continue }

            set keyState [lindex $KEY_STATES $value]

            set isDown [expr {$keyState != "up"}]
            if {[dict exists $::keymap::modWeights $key]} {
                set weight [dict get $::keymap::modWeights $key]
                dict set modifiers $key [expr {$isDown * $weight}]
            }

            set now [clock milliseconds]
            set options [dict create timestamp $now]
            if {$keychar ne ""} {
                dict set options printable $keychar
            }
            Assert! keyboard $keyboard claims key $key is $keyState with {*}$options
            # puts stderr [list keyboard $keyboard claims key $key is $keyState with {*}$options]

            # Retract all key events that are more than 5 seconds old.
            set events [Query! keyboard $keyboard claims key /key/ is /keyState/ with /...options/]
            foreach event $events {
                dict with event {
                    set timestamp [dict get $options timestamp]
                    if {$now - $timestamp > 5000} {
                        Retract! keyboard $keyboard claims key $key is $keyState with {*}$options
                    }
                }
            }
        }
    }
}
