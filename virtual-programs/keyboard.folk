set ::debug_keyboard true

proc udevadmProperties {device} {
    return [exec udevadm info --query=property --name=$device]
}

proc getDEVLINKS {device} {
    set properties [udevadmProperties $device]
    if {$properties eq ""} {
        return ""
    }
    set devlinks [list]
    foreach line [split $properties \n] {
        if {[string match "DEVLINKS=*" $line]} {
            set devlinks [string replace $line 0 8]
            foreach path [split $devlinks " "] {
                lappend devlinks $path
            }
        }
    }

    return $devlinks
}

proc establishKeyPressListener {eventPath} {
    set kb [open $eventPath r]
    fconfigure $kb -translation binary
    return $kb
}

# Function to check if the device is a keyboard
proc isKeyboard {device} {
    set properties [udevadmProperties $device]
    if {$properties eq ""} {
        return false
    }
    set isKeyboard [string match *ID_INPUT_KEYBOARD=1* $properties]
    return $isKeyboard
    # TODO: Excluding mice would nice to keey the list of keyboard devices short
    #       Alas, including mice is necessary for the Logitech K400R keyboard
    # set isMouse [string match *ID_INPUT_MOUSE=1* $properties]
    # return [expr {$isKeyboard && !$isMouse}]
}

####
# /dev/input/event* addresses are the ground truth for keyboard devices
#
# This function goes through each of them and checks if they are keyboards
proc walkInputEventPaths {} {
    # set allDevices [glob -nocomplain "/dev/input/event*"]
    set allDevices [glob -nocomplain "/dev/input/by-path/*"]
    set keyboards [list]
    foreach device $allDevices {
        set devLinks [getDEVLINKS $device]
        if {[llength $devLinks] > 0 && [isKeyboard $device]} {
            if {[file readable $device] == 0} {
                puts "Device $device is not readable. Attempting to change permissions."
                # Attempt to change permissions so that the file can be read
                exec sudo chmod +r $device
            }
            lappend keyboards [dict create eventPath $device devLinks $devLinks]
        }
    }
    return $keyboards
}

proc findMatchingEventPath {searchList eventPath} {
    foreach element $searchList {
        set elEventPath [dict get $element eventPath]
        if {$eventPath eq $elEventPath} {
            return $element
        }
    }
    return 0
}

set keyboardDevices [walkInputEventPaths]

# go through each keyboard device and start a process that 
foreach keyboard $keyboardDevices {
    set eventPath [dict get $keyboard eventPath]
    Claim keyboards are $keyboardDevices
    Start process "keyboard-$eventPath" {
        source "pi/KeyCodes.tcl"
        Wish $::thisProcess shares statements like \
            [list keyboard /kb/ claims key /k/ is /t/ with modifiers /m/]
        variable evtBytes 16
        variable evtFormat iissi
        if {[exec getconf LONG_BIT] == 64} {
            set evtBytes 24
            set evtFormat wwssi
        }
        set keyboardSpecifier $eventPath
        variable eventPathChannel [open $eventPath r]
        set keyStates [list up down repeat]
        set modifiers [dict create \
            shift 0 \
            ctrl 0 \
            alt 0 \
        ]
        while 1 {
            binary scan [read $eventPathChannel $evtBytes] $evtFormat tvSec tvUsec type code value
            if {$type > 0x04} {
                set eventPathChannel [open $eventPath r]
                binary scan [read $eventPathChannel $evtBytes] $evtFormat tvSec tvUsec type code value
            }
            if {$type == 0x01} {
                set shift [dict get $modifiers shift]
                set key [keyFromCode $code $shift]
                set keyState [lindex $keyStates $value]

                # dict set modifiers shift 0
                # dict set modifiers alt 0
                # dict set modifiers ctrl 0

                set isDown [expr {$keyState != "up"}]
                if {[string match *SHIFT $key]} {
                    dict set modifiers shift $isDown
                }
                if {[string match *CTRL $key]} {
                    dict set modifiers ctrl $isDown
                }
                if {[string match *ALT $key]} {
                    dict set modifiers alt $isDown
                }

                set heldModifiers [dict keys [dict filter $modifiers value 1]]
                puts "shift: [string match *SHIFT $key] | $key"
                puts "modifiers: $heldModifiers"

                puts "got key event ($keyboardSpecifier): $code => $key | $value"
                Retract keyboard $keyboardSpecifier claims key /k/ is /t/ with modifiers /m/
                # Assert keyboard $keyboardSpecifier claims key [list $key] is [list $keyState] with modifiers [list $heldModifiers]
                Assert keyboard $keyboardSpecifier claims key $key is $keyState with modifiers $heldModifiers
                Step
            }
        }
        # set kbEventPath [open $eventPath r]
        # set keyStates [list up down repeat]
        # set modifiers [dict create \
        #     shift 0 \
        #     ctrl 0 \
        #     alt 0 \
        # ]

        # set shift [dict get $modifiers shift]
        # set key [keyFromCode $keyCode $shift]
        # set keyState [lindex $keyStates $eventType]

        # set isDown [expr {$keyState != "up"}]
        # if {[string match *SHIFT $key]} {
        # dict set modifiers shift $isDown
        # }
        # if {[string match *CTRL $key]} {
        # dict set modifiers ctrl $isDown
        # }
        # if {[string match *ALT $key]} {
        # dict set modifiers alt $isDown
        # }

        # set heldModifiers [dict keys [dict filter $modifiers value 1]]

        # while 1 {
        #     binary scan [read $kbEventPath $evtBytes] $evtFormat tvSec tvUsec type code value
        #     if {$type == 0x01} {
        #         Retract keyboard $keyboardSpecifier claims key /k/ is /t/ with modifiers /m/
        #         Assert keyboard $keyboardSpecifier claims key [list $key] is [list $keyState] with modifiers [list $heldModifiers]
        #         puts "got key event ($keyboardSpecifier): $key $keyState $heldModifiers"
        #         # return [list $code $value]
        #     }
        # }
        # # establishKeyPressListener $eventPath
        # # foreach devlink [dict get $keyboard devLinks] {
        # #     puts " -- : $devlink"
        # #     establishKeyPressListener $devlink
        # # }
    }
}