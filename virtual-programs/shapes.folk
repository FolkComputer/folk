# numPoints 2 => line
# numPoints 3 => triangle
# numPoints 4 => square
proc shape {numPoints c r {angle 0} {color white} {filled false} args} {
  set p [list 0 0]
  set center $p
  set points [list $p]

  set incr [expr {2 * 3.14159 / $numPoints}]
  set a [expr {$incr + 3.14159}]
  for {set i 0} {$i < $numPoints} {incr i} {
    set p [vec2 add $p [vec2 scale [list [expr {cos($a)}] [expr {sin($a)}]] $r]]
    lappend points $p
    # Accumulate center
    set center [vec2 add $center $p]
    set a [expr {$a + $incr}]
  }
  set center [vec2 scale $center [expr {1.0/$numPoints}]]

  set points [lmap v $points {
      set v [vec2 sub $v $center]
      set v [vec2 rotate $v $angle]
      set v [vec2 add $v $c]
      set v
  }]

  if {$filled} {
    Display::fillPolygon $points $color
  } else {
    Display::stroke $points 1 $color
  }
}


When /someone/ wishes /p/ draws a /color/ /shape/ offset /offsetVector/ & /p/ has region /r/ {
  lassign [region centroid $r] x y
  set width [region width $r]
  set height [region height $r]
  lassign $offsetVector offsetX offsetY
 
  if {$offsetX != 0} {
    set x [expr {$x + $offsetX}]
  }
  if {$offsetY != 0} {
    set y [expr {$y + $offsetY}]
  }

  set angle [region angle $r]
  set p [list $x $y]

  # puts "drawing a $shape at $x $y with width $width and height $height"
  set radius 50
  switch -nocase $shape {
    triangle {
      shape 3 $p $radius $angle $color
    }
    square {
      shape 4 $p $radius $angle $color
    }
    pentagon {
      shape 5 $p $radius $angle $color
    }
    hexagon {
      shape 6 $p $radius $angle $color
    }
    septagon {
      shape 7 $p $radius $angle $color
    }
    octagon {
      shape 8 $p $radius $angle $color
    }
    nonagon {
      shape 9 $p $radius $angle $color
    }
    circle {
      Display::circle $x $y $radius 5 $color
    }
    default {
      shape 2 $p $radius $angle $color
    }
  }
}

set defaultColor white

When /someone/ wishes /p/ draws a /color/ /shape/ & /p/ has region /r/ {
  Wish $p draws a $color $shape offset {0 0}
}

When /someone/ wishes /p/ draws a /shape/ & /p/ has region /r/ {
  Wish $p draws a $defaultColor $shape
}

When /someone/ wishes /p/ draws a /shape/ offset /offsetVector/ {
  Wish $p draws a $defaultColor $shape offset $offsetVector 
}

Claim $this has demo {
  Wish $this draws a circle
  Wish $this draws a skyblue triangle
  Wish $this draws a green triangle offset {280 0}
  Wish $this draws a gold pentagon offset {200 0}
  Wish $this draws a red octagon offset {250 80}

  When the clock time is /t/ {
    set offsetVector [list [sin $t] [cos $t]]
    set offsetVector [::vec2::scale $offsetVector 105]
    Wish $this draws a palegoldenrod circle offset $offsetVector
  }

  # This toggles a square between filled and unfilled
  # TODO cwervo: Support `Wish $this draws a circle with options /optionsDict/` to make this cleaner
  # optionsDisct: {size number?: 50, filled boolean?: false, color string?: white, thickness string? white }
  When $this has region /r/ & the clock time is /t/ {
    lassign [region centroid $r] x y
    set fill [expr {round(sin($t) * 2) % 2 == 0 ? true : false}]
    set y [- $y 150]
    shape 4 [list [- $x 100] $y] 0 60 white $fill
  }

  Wish $this is outlined white
}
