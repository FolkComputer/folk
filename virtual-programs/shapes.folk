Wish $this has filename "shapes.folk"

set sizeDict [dict create small 1 medium 4 large 10]

proc isSizeWord {word} {
  expr {[lsearch [list small medium large] $word] >= 0}
}
proc polyline {points {strokeWeight 5} {color white} args} {
  set i 0
  set pointsLength [llength $points]
  set PL_less_one [expr {$pointsLength - 1}]
  while {$i < $pointsLength} {
      if {$i eq $PL_less_one} { return }
      set current [lindex $points $i]
      incr i
      set next [lindex $points $i]
      Display::stroke [list $current $next] $strokeWeight $color
  }
}

proc rectangle {x y w h {strokeWeight 5} {color "white"}} {
  set start [list $x $y]
  set points [list $start]

  puts [list [expr {$x + $w}] $y]

  lappend points [list [expr {$x + $w}] $y]
  lappend points [list [expr {$x + $w}] [expr {$y + $h}]]
  lappend points [list $x [expr {$y + $h}]]
  lappend points $start
  polyline $points $strokeWeight $color
}

proc square {x y w {strokeWeight 5} {color "white"} args} {
  rectangle $x $y $w $w $strokeWeight $color
}

proc regionToInnerRect {region} {
    set vertices [lindex $region 0]
    lassign $vertices a b c d
    lassign $a aX aY
    lassign $c cX cY
    set shrinkConstant 0.65
    set width [expr {($cX - $aX) * $shrinkConstant}]
    set height [expr {($cY - $aY) * $shrinkConstant}]
    set x [expr {$aX + $width * 0.25}]
    set y [expr {$aY + $height * 0.25}]
    return [list $x $y $width $height]
}

# --- Wish $this has ... ----

# numPoints 2 => line
# numPoints 3 => triangle
# numPoints 4 => square
proc shape {numPoints x y size {color white} args} {
  set start [list $x $y]
  set points [list $start]
  set r [expr {$size / 2.0}]
  set i 0
  while {$i < $numPoints} {
    incr i
    set angle [expr {2 * 3.14159 * $i / $numPoints}]
    set x [expr {$x + $r * cos($angle)}]
    set y [expr {$y + $r * sin($angle)}]
    lappend points [list $x $y]
  }
  polyline $points 5 $color
}

When /someone/ wishes /p/ draws a /color/ /shape/ offset /offsetVector/ & /p/ has region /r/ {
  lassign [regionToInnerRect $r] x y width height
  lassign $offsetVector offsetX offsetY
 
  if {$offsetX != 0} {
    set x [expr {$x + $offsetX}]
  }
  if {$offsetY != 0} {
    set y [expr {$y + $offsetY}]
  }

  puts "drawing $shape at $x $y"

  set adjustedWidth [expr {$width * 0.25}]
  set x [expr { $x * 1.3}]
  set y [expr { $y * 1.25}]
  switch -nocase $shape {
    triangle {
      shape 3 $x $y $adjustedWidth $color
    }
    square {
      shape 4 $x $y $adjustedWidth $color
    }
    # TODO: cwervo - fix magic numbers here
    circle {
      shape 10 [expr {$x * 0.98}] $y [expr {$adjustedWidth * 0.4}] $color
    }
    default {
      shape 5 $x $y $adjustedWidth $color
    }
  }
}

When /someone/ wishes /p/ draws a /color/ /shape/ & /p/ has region /r/ {
  Wish $p draws a $color $shape offset {0 0}
}

# Calculates a Bezier curve with the specified control points
proc bezier {points {stepSize 0.01}} {
  set n [expr {[llength $points] - 1}]
  set curve [list]

  for {set t 0.0} {$t <= 1.0} {set t [expr {$t + $stepSize}]} {
    set x 0.0
    set y 0.0
    for {set i 0} {$i <= $n} {incr i} {
      set coeff [expr {pow(1 - $t, $n - $i) * pow($t, $i) * [binomial $n $i]}]
      set x [expr {$x + $coeff * [lindex [lindex $points $i] 0]}]
      set y [expr {$y + $coeff * [lindex [lindex $points $i] 1]}]
    }
    lappend curve [list $x $y]
  }

  return $curve
}

# Returns the binomial coefficient of n and k
proc binomial {n k} {
  if {$k == 0 || $k == $n} {
    return 1
  } elseif {$k < 0 || $k > $n} {
    return 0
  } else {
    set a [binomial [expr {$n - 1}] [expr {$k - 1}]]
    set b [binomial [expr {$n - 1}] $k]
    return [expr {$a + $b}]
  }
}

When /someone/ wishes /p/ drawss a bezier /points/ {
  polyline [bezier $points 0.01] 5 white
}

When /someone/ wishes /p/ draws a polyline /points/ {
  polyline $points 5 white
}

When /someone/ wishes /p/ draws a /color/ polyline /points/ {
  polyline $points 5 $color
}

When /someone/ wishes /p/ draws a /shape/ & /p/ has region /r/ {
  if {$shape eq "bezier"} {
  } else {
    Wish $p draws a white $shape
  }
}

When /someone/ wishes /p/ draws a /shape/ offset /offsetVector/ {
  Wish $p draws a white $shape offset $offsetVector 
}


When /someone/ wishes /p/ draws a /color/ /shape/ size /s/ & /p/ has region /r/ {
  lassign [regionToInnerRect $r] x y w h
  shape 10 $x $y $s $color
}
# --- TODO: Wish table has ... ----
