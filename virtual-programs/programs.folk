

When (non-capturing) /type/ /obj/ has a program {
    # puts "Added $type $obj"
    # On unmatch { puts "Removed $type $obj" }

    try {
        if {[file exists "$::env(HOME)/folk-printed-programs/$obj.folk.temp"]} {
            set fd [open "$::env(HOME)/folk-printed-programs/$obj.folk.temp" r]
        } else {
            # HACK: localhost is folk-live for now. idk why.
            if {![file exists "$::env(HOME)/folk-printed-programs/$obj.folk"] &&
                ($::thisNode in [list "folk-beads" "folk-convivial" "gadget-red" "gadget-blue" "gadget-pink"])} {
                # HACK: 'Page fault' to folk0, try getting page from
                # there. Ideally we would have some general (Avahi?)
                # way of finding the 'authoritative' node on the local
                # network, or broadcasting out, and getting pages from
                # there.
                puts stderr "programs: WARNING: Faulting to folk0 to try to get program $obj.folk"
                exec curl --output "$::env(HOME)/folk-printed-programs/$obj.folk" \
                    "http://folk0.local:4273/printed-programs/$obj.folk" &
                exec curl --output "$::env(HOME)/folk-printed-programs/$obj.meta.folk" \
                    "http://folk0.local:4273/printed-programs/$obj.meta.folk" &
                # HACK: It won't be reloaded until you redetect the tag.
            }
            set fd [open "$::env(HOME)/folk-printed-programs/$obj.folk" r]
        }

        set code [read $fd]
        close $fd

        if {[file exists "$::env(HOME)/folk-printed-programs/$obj.folk.edited"]} {
            set fd [open "$::env(HOME)/folk-printed-programs/$obj.folk.edited" r]
            set editedCode [read $fd]

            Hold (on virtual-programs/code-view.folk) new-code-for:$obj {
                Wish program $obj is replaced with code $editedCode
                Wish $obj is titled "EDITED"
            }

            close $fd
        }

        Claim $obj has original program code $code
        When /nobody/ wishes program $obj is replaced with code /anything/ {
            Claim $obj has program code $code
        }

        When /someone/ wishes program $obj is replaced with code /newCode/ {
            Claim $obj has program code $newCode
            Wish $obj is titled "EDITED"
        }

        if {[file exists "$::env(HOME)/folk-printed-programs/$obj.meta.folk"]} {
            set mfd [open "$::env(HOME)/folk-printed-programs/$obj.meta.folk" r]
            set metacode [read $mfd]; close $mfd
            apply [list {this} $metacode] $obj
        }
    } on error error {
        puts stderr "No code for $type $obj"
    }
}

When /someone/ wishes /obj/ runs program /code/ {
  Claim $obj has program code $code
}
