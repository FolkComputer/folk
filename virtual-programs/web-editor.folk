Wish the Web server handles route {/page/(\d*)$} with handler {
    if {[regexp -all {/page/(\d*)$} $path whole_match pageNumber]} {
        set fp [open "../folk-printed-programs/$pageNumber.folk" r]
        set file_data [read $fp]
        close $fp
        set html [string map [list file_data [htmlEscape $file_data] my_page_number $pageNumber] {
            <html>
            <body>
            <div>
                <span id="status">Status</span>
                <button onclick="handleSave()">Save</button>
                <button onclick="handlePrint()">Print</button>
            </div>
            <textarea id="code" style="width: 100%;height: 95vh;">file_data</textarea>
            <pre id="error"></pre>
<script>
const codeEle = document.getElementById("code");
function uuidv4() {
  return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
  );
}

// Cmd + S || Ctrl + S => Save
document.addEventListener('keydown', function(e) {
  if ((window.navigator.platform.match('Mac') ? e.metaKey : e.ctrlKey)  && e.keyCode == 83) {
    e.preventDefault();
    handleSave();
  }
}, false);
// Cmd + P || Ctrl + P => Print
document.addEventListener('keydown', function(e) {
  if ((window.navigator.platform.match('Mac') ? e.metaKey : e.ctrlKey)  && e.keyCode == 80) {
    e.preventDefault();
    handlePrint();
  }
}, false);

let ws;
let send;
function wsConnect() {
    ws = new WebSocket(window.location.origin.replace("http", "ws") + "/ws");
    send = function(s) { ws.send(s); }

    ws.onopen = () => {
        document.getElementById('status').innerHTML = "<span style=background-color:seagreen;color:white;>Connnected</span>";
    };
    ws.onclose = window.onbeforeunload = () => {
        document.getElementById('status').innerHTML = "<span style=background-color:red;color:white;>Disconnnected</span>";

        setTimeout(() => { wsConnect(); }, 1000);
    };
    ws.onerror = (err) => {
        document.getElementById('status').innerText = "Error";
        console.error('Socket encountered error: ', err.message, 'Closing socket');
        ws.close();
    }
  ws.onmessage = (msg) => {
    if (msg.data.startsWith("ERROR:")) {
      const errorEl = document.getElementById("error");
      if (msg.data == "ERROR: {}") {
        errorEl.style.backgroundColor = "";
        errorEl.innerText = "";
      } else {
        errorEl.style.backgroundColor = "#f55";
        errorEl.innerText = msg.data;
      }
    }
  }
};
wsConnect();

function handleSave() {
    const code = document.getElementById("code").value;
  send(`
set fp [open "../folk-printed-programs/my_page_number.folk" w]
puts -nonewline $fp {${code}}
close $fp
puts "Saved my_page_number.folk"
`);
    setTimeout(() => {
      send(`list ERROR: [Statements::findMatches [list my_page_number has error /err/ with info /errorInfo/]]`);
    }, 500);
}
let jobid;
function handlePrint() {
    const code = document.getElementById("code").value;
    jobid = String(Math.random());
    send(`Assert web wishes to print program my_page_number with code {${code}} with job id {${jobid}}`);
    setTimeout(500, () => {
      send(`Retract web wishes to print program my_page_number with code {${code}} with job id {${jobid}}`);
    });
}
</script>
            </body>
            </html>
        }]
    }
}