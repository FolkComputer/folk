# Commands covered:  pid
#
# This file contains a collection of tests for one or more of the Tcl
# built-in commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 1991-1993 The Regents of the University of California.
# Copyright (c) 1994-1995 Sun Microsystems, Inc.
# Copyright (c) 1998-1999 by Scriptics Corporation.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @(#) $Id: pid.test,v 1.6 2000/04/10 17:19:03 ericm Exp $

source [file dirname [info script]]/testing.tcl

needs cmd pid posix
needs cmd exec
catch {package require regexp}
testConstraint regexp [expr {[info commands regexp] ne {}}]
testConstraint pipe [expr {[info commands pipe] ne {}}]
testConstraint getpid [expr {[catch pid] == 0}]
# This is a proxy for tcl || tclcompat
testConstraint pidchan [expr {[info commands fconfigure] ne {}}]

file delete test1

test pid-1.1 {pid command} {regexp getpid} {
    regexp {(^[0-9]+$)|(^0x[0-9a-fA-F]+$)} [pid]
} 1
test pid-1.2 {pid command} {regexp pipe pidchan} {
    set f [open {| echo foo | cat >test1} w]
    set pids [pid $f]
    close $f
    catch {removeFile test1}
    list [llength $pids] [regexp {^[0-9]+$} [lindex $pids 0]] \
       [regexp {^[0-9]+$} [lindex $pids 1]] \
       [expr {[lindex $pids 0] == [lindex $pids 1]}]
} {2 1 1 0}
test pid-1.3 {pid command} {pipe pidchan} {
    set f [open test1 w]
    set pids [pid $f]
    close $f
    set pids
} {}
test pid-1.4 {pid command} pidchan {
    list [catch {pid a b} msg] $msg
} {1 {wrong # args: should be "pid ?channelId?"}}
test pid-1.5 {pid command} pidchan {
    list [catch {pid gorp} msg] $msg
} {1 {can not find channel named "gorp"}}

# cleanup
file delete test1

testreport
